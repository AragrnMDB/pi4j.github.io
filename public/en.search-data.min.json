[{"id":0,"href":"/pages-to-integrate/04.documentation/09.about-the-code/docs/","title":"About the code","parent":"Pages-to-integrates","content":"!!! In this section, you can find detailed info if you would like to contribute to the Pi4J Core project, want to create plugins and/or want to understand and build the core code.\n"},{"id":1,"href":"/pages-to-integrate/04.documentation/08.advanced/default/","title":"Advanced","parent":"Pages-to-integrates","content":"Pi4J V2 tries to focus on its core functionality (the GPIO I/O) but at the same time wants to provide the possibility to extend and adapt to other hardware, underlying framework etc.\nYou can find more info on these pages about some of the current functionalities to achieve this:\n"},{"id":2,"href":"/pages-to-integrate/04.documentation/08.advanced/05.annotated-provisioning/docs/","title":"Annotated provisioning","parent":"Pages-to-integrates","content":"Next to the declarative approach, Java annotations are available for the configuration of I/O provisioning instead of the hard-coded approach offered in V1.\nThis implementation still needs to be further fine-tuned and unified somehow to make things cleaner and more straightforward, but would provide a way to initialize a I/O for instance like this:\n@Register(0) @Address(\u0026quot;my.digital.input.pin.zero\u0026quot;) @Name(\u0026quot;My Digital Input Pin\u0026quot;) @Debounce(300000) // microseconds @WithProvider(type=PiGpioDigitalInputProvider.class) private DigitalInput input;  "},{"id":3,"href":"/pages-to-integrate/04.documentation/01.architecture/docs/","title":"Architecture/Design","parent":"Pages-to-integrates","content":"The code of Pi4J is based on a layered approach, visualized in the picture below.\nSince Pi4J is a low-level library, it tries to avoid inheriting third-party libraries at all costs. More complex dependency chains make it more difficult for users, especially novice users. Therefor, the only dependency Pi4J V.2 has is SLF4J to provide a standardized and extensible logging framework.\nThe dark grey blocks \u0026ldquo;Annotation Engine\u0026rdquo;, \u0026ldquo;@Register\u0026rdquo; and \u0026ldquo;@Inject\u0026rdquo; are here as a future idea but are not included in the current V2.\n"},{"id":4,"href":"/pages-to-integrate/04.documentation/09.about-the-code/03.build-instructions/docs/","title":"Build Instructions","parent":"Pages-to-integrates","content":" Building the Pi4J Project is simple and requires minimal effort. Pi4J is primarily built using Apache Maven and Java 11. Pi4J can be built directly on your host computer or inside a Docker container where all toolchains and dependencies are already installed, configuired and cached.\n! Note: if you wish to build using a Docker container, please skip ahead to the Building with Docker topic.\nPrerequsites In order to build Pi4J, the host system must have the following toolchains pre-installed.\n| Name | Version | URL | | \u0026mdash; | \u0026mdash; | \u0026ndash; | | Java Development Kit (JDK) | 11.0.7 (or newer) | https://openjdk.java.net/ | | Apache Maven | 3.6.3 (or newer) | https://maven.apache.org/download.cgi |\nBuild Environment The JAVA_HOME system environment variable must be configiured to point to the JDK installed path.\nBuilding with Maven To build the Pi4J project, use the following Maven comand from the parent Pi4J directory.\nmvn clean install  If you prefer to skip all unit/integration testing, use the folllowing Maven command:\nmvn clean install -DskipTests  Building with Docker Alternatively, the Pi4J project can be entirely compiled inside a prebuilt Pi4J Builder Docker container. This eliminates the need/requirement to install the build toolchains and configure your system to build Pi4J. To build the Pi4J project using Docker, run the following shell script from the parent Pi4J directory.\n./build-docker.sh  The project which provides these Docker images can be found on GitHub \u0026gt; Pi4J/pi4j-docker and includes an extensive README with the full info on how to build and use these images.\n!!! Extract from the README:\nThis project contains the Dockerfiles and build scripts to create the Pi4J builder\ndocker images used for compiling/building the Pi4J projects. The Pi4J builder images include the following:\n  Pi4J Base Builder pi4j/pi4j-builder-base:latest : This is the base image used by all the other builder images. It's based on Ubuntu 18.04 with JDK 11 and Maven pre-installed. This image's entry point is a Bash shell. (https://hub.docker.com/repository/docker/pi4j/pi4j-builder-base)\n  Pi4J Native Builder pi4j/pi4j-builder-native:latest : This image is derived from pi4j/pi4j-builder-base and adds support for native cross-compilers and build tools for architectures: arm, armhf, aarch64/arm64. This image's entry point is a bash shell attempting to execute the file ./build.sh in the volume mounted under the /build path.\n  Pi4J v1.4 Builder pi4j/pi4j-builder:1.4 : This image is derived from pi4j/pi4j-builder-native and additionally includes pre-cached Maven build plugins and dependencies for Pi4J v1.4 builds. This image's entry point is a Maven shell. If not explicitly provided, the default maven build arguments will be: clean install -DskipTests -Pall-platforms. This will effectively build all Pi4J projects including the pi4j-native project containing native libraries which will be cross-compiled for RaspberryPi/ARM (32-bit \u0026amp; 64-bit) devices.\n  Pi4J v2.0 Builder pi4j/pi4j-builder:2.0 : This image is derived from pi4j/pi4j-builder-native and additionally includes pre-cached Maven build plugins and dependencies for Pi4J v2.0 builds. This image's entry point is a Maven shell. If not explicitly provided, the default maven build arguments will be: clean install -DskipTests -native. This will effectively build all Pi4J projects including the native library projects which will be cross-compiled for RaspberryPi/ARM (32-bit \u0026amp; 64-bit) devices.\n  Note: Pi4J versions prior to v1.4 are not currently tested or supported in these Docker images.\nBuilding Pi4J Native Libraries Pi4J V2 also includes native libraries that will need to be compiled if you are modifying any native code. Most users will never need to compile the native libraries as these artifacts are automatically downloaded when building the Pi4J JARs from Maven repositories. One of the following commands can be used to build the Pi4J JARs and Native Libraries:\nmvn clean install -Pnative mvn clean install -Pnative,docker mvn clean install -Pnative,cross-compile  !!! Note: See the custom build profiles in the Custom Build Profiles section for more information about the profiles illustrated in these commands.\nAdditional information about Docker Builds vs Cross-Compiler builds can be found here: https://github.com/Pi4J/pi4j-v2/issues/21#issuecomment-651976487\n!! TODO:: Create a topic here detailing Docker builds vs Cross-compiler builds.\nCustom Build Profiles The Pi4J Maven build includes a number of custom profiles that can be activated to perform various build steps.\n   Profile Description Notes     sources Package raw sources for each JAR Only needed when performing a snapshot or release build.   javadoc Compile and package JavaDoc for each JAR Only needed when performing a snapshot or release build.   native Compile any native libraries included in the build Only needed when modifying native code or performing a snapshot or release build.   docker Use docker builder containers to compile native library artifacts Only used when incuding the native profile or performing a snapshot or release build.   cross-compile Use cross-compilers on host to compile native library artifacts Only used when incuding the native profile or performing a snapshot or release build.   test-hardware Perform hardware integration testing EXPERIMENTAL   mac Use docker builder containers to compile native library artifacts (Same as docker profile) Automatically activated when running build from a MacOS host system.   windows Use docker builder containers to compile native library artifacts (Same as docker profile) Automatically activated when running build from a Windows host system.   transfer Perform SSH/SCP file transfers for each JAR to a remote Raspberry Pi Used for parallel development and testing.    You can activate a build profile using the -P{profile-name} argument in the Maven command:\nmvn clean install -Pjavadoc  Release/Snapshot Builds Pi4J release and snapshot builds are reserved for the Pi4J Development Team. A release build ensures all JARs, resources, source-bundles, native libraries, and javadoc artifacts are compiled and deployed to the public Maven repositories. You can use the following command to perform all the build steps that would be performed during a release or snapshot build.\nmvn clean install -Drelease-build  "},{"id":5,"href":"/pages-to-integrate/03.getting-started/08.build-io/docs/","title":"Building an I/O Instance","parent":"Pages-to-integrates","content":"Your page content goes here.\n"},{"id":6,"href":"/categories/","title":"Categories","parent":"Pi4J","content":""},{"id":7,"href":"/pages-to-integrate/03.getting-started/06.chose-platform/docs/","title":"Choosing a Platform","parent":"Pages-to-integrates","content":"Platforms are extensible service modules responsible for defining a set of default I/O providers and specific hardware capabilities for an embedded hardware system where Pi4J is deployed/running.\nTechnically speaking \u0026hellip; multiple platforms could be loaded into the runtime context, but only one will be considered the default platform for most I/O provisioning and operations. An example of this could be both a RaspberryPi Platform and Mock Platform are detected as plugins and loaded into the context, but only one will be determined at runtime to be the default platform used by the context.\n_TODO: some priority scheme will need to be implemented and invoked at runtime to resolve which is the best \u0026ldquo;platform\u0026rdquo; to accept as the default platform at runtime (on startup). _\nThe idea here is that a user could have multiple platform plugins in their directory but only one, theoretically the best suited, will be determined and used at runtime based on the runtime environment which makes it possible to develop, run and test on e.g. Windows with the MockPlatform and when finished run on the Raspberry Pi with the same generated jar\u0026rsquo;s which use the RaspberryPiPlatform.\nCurrent supported platforms:\n// TODO subpages\n"},{"id":8,"href":"/pages-to-integrate/03.getting-started/07.chose-provider/docs/","title":"Choosing an I/O Provider","parent":"Pages-to-integrates","content":"Providers are extensible service modules responsible for the concrete implementation of a specific I/O type. Multiple providers for the same I/O type can be loaded into a Pi4J context concurrently. For example a \u0026ldquo;RaspberryPi-DigitalInputProvider\u0026rdquo; and \u0026ldquo;GertBoard-DigitalInputProvider\u0026rdquo; could both be loaded and both providing digital inputs at the same time.\nThe providers also allow to seperate the internal logic of the Pi4J core from the concrete implementation of the board on which they are used.\nCurrent supported providers:\n// TODO subpages\nPossible future providers:  LinuxFileSystemProvider: e.g. to use native Linux serial interfaces RemoteProvider to control the I/O from a remote device e.g. through websockets \n"},{"id":9,"href":"/pages-to-integrate/04.documentation/09.about-the-code/06.code-styling/docs/","title":"Code styling","parent":"Pages-to-integrates","content":"To prevent unnecessary code (tabs versus spaces, number of characters per line\u0026hellip;) we have defined an editorconfig for IntelliJ IDEA. You can find more info here about its use.\nSome tips to keep the code clean and readable: * Short methods with a clear name * Use SonarLint to get improvement tips while code * Use shortcuts * CTRL+ALT+L: Reformat code * CTRL+ALT+O: Optimize imports\n"},{"id":10,"href":"/pages-to-integrate/07.forums/external/","title":"Community Forums","parent":"Pages-to-integrates","content":""},{"id":11,"href":"/pages-to-integrate/03.getting-started/05.create-context/docs/","title":"Creating a Pi4J Context","parent":"Pages-to-integrates","content":" The context is an immutable runtime object that holds the configured state and manages the lifecycle of a Pi4J instance. It includes all loaded plugins, providers, platforms, I/O instance registry, environmental configuration and runtime objects including executor thread pools, I/O event listeners, etc.\nTerminating/destroying the context stops and releases all resources, threads, listeners, and provisioned I/O instances held by the context.\nVersion 1 was implemented using a static singleton, while version 2 uses a \u0026ldquo;Context\u0026rdquo; to avoid static singletons.\nA Pi4J Context can be created automatically (accepting all default context configurations) or manually (builder) allowing users to customize the context configuration.\nAutomatic An auto context includes AUTO-DETECT BINDINGS enabled which will load all detected Pi4J extension libraries (Platforms and Providers) in the class path.\nvar pi4j = Pi4J.newAutoContext();  Builder If you need more flexibility are specific use-cases, the builder can be used to define all the parameters of the context, for example when you want to use your own providers, use mocked instances for testing\u0026hellip;:\nContext pi4j = Pi4J.newContextBuilder() .add(new MockPlatform()) .add(MockAnalogInputProvider.newInstance(), MockAnalogOutputProvider.newInstance(), MockSpiProvider.newInstance(), MockPwmProvider.newInstance(), MockSerialProvider.newInstance(), MockI2CProvider.newInstance(), MockDigitalInputProvider.newInstance(), MockDigitalOutputProvider.newInstance()) .add(new MyCustomADCProvider(/* implements AnalogInputProvider, id=\u0026quot;my-adc-prov\u0026quot; */)) .add(new MyCustomSPIProvider(/* implements SpiProvider, id=\u0026quot;my-spi-prov\u0026quot; */)) .build();  "},{"id":12,"href":"/pages-to-integrate/04.documentation/08.advanced/06.dependency-injection/docs/","title":"Dependency injection","parent":"Pages-to-integrates","content":"Along with the annotated I/O configuration the ability to support I/O provisioning via dependency injection also makes a lot of sense. There is some basic brute-force stuff working but this needs more work to make this a compatible implementation for Spring or CDI.\n@Inject private Context pi4j; // register a digital input listener to listen for any value changes on the digital input pin @Register(DIGITAL_INPUT_PIN_ID) private DigitalStateChangeListener changeListener = event -\u0026gt; System.out.println(\u0026quot; (LISTENER #1) :: \u0026quot; + event); // setup a digital input event listener to listen for any value changes on the digital input // using a custom method with a single event parameter @OnEvent(DIGITAL_INPUT_PIN_ID) private void onDigitalInputChange(DigitalStateChangeEvent event){ System.out.println(\u0026quot; (LISTENER #2) :: \u0026quot; + event); }  "},{"id":13,"href":"/pages-to-integrate/03.getting-started/11.devices-examples/default/","title":"Devices examples","parent":"Pages-to-integrates","content":"The core Pi4J V2 library doesn\u0026rsquo;t contain any specific support for devices like buttons, motors, LCD\u0026hellip; This was part of V1 but made it much more difficult to maintain and fully test the library.\nOn this page we want to keep a list of projects which contain implementation code for specific devices using the Pi4J V2 core library. Please let us know through the forum if you want to have your project added to this list.\n!! TODO add content\n"},{"id":14,"href":"/pages-to-integrate/03.getting-started/10.io-examples/02.digital-input/docs/","title":"Digital Input (GPIO)","parent":"Pages-to-integrates","content":"V2 provides a declarative style of configuration for I/O provisioning instead of the hard-coded approach offered in V1.\nExamples of the various methods and approaches which can be used to provision the I/O needs are available in the examples project.\nProperties properties = new Properties(); properties.put(\u0026quot;id\u0026quot;, \u0026quot;my_digital_input\u0026quot;); properties.put(\u0026quot;address\u0026quot;, DIGITAL_INPUT_PIN); properties.put(\u0026quot;pull\u0026quot;, \u0026quot;UP\u0026quot;); properties.put(\u0026quot;name\u0026quot;, \u0026quot;MY-DIGITAL-INPUT\u0026quot;); var config = DigitalInput.newConfigBuilder(pi4j) .load(properties) .build(); var input = pi4j.din().create(config);  "},{"id":15,"href":"/pages-to-integrate/03.getting-started/10.io-examples/01.digital-output/docs/","title":"Digital Output (GPIO)","parent":"Pages-to-integrates","content":"// Initialize Pi4J with an auto context // An auto context includes AUTO-DETECT BINDINGS enabled // which will load all detected Pi4J extension libraries // (Platforms and Providers) in the class path var pi4j = Pi4J.newAutoContext(); // create a digital output instance using the default digital output provider var output = pi4j.dout().create(DIGITAL_OUTPUT_PIN); output.config().shutdownState(DigitalState.HIGH); // setup a digital output listener to listen for any state changes on the digital output output.addListener(System.out::println); // lets invoke some changes on the digital output output.state(DigitalState.HIGH) .state(DigitalState.LOW) .state(DigitalState.HIGH) .state(DigitalState.LOW); // lets toggle the digital output state a few times output.toggle() .toggle() .toggle(); // another friendly method of setting output state output.high() .low(); // lets read the digital output state System.out.print(\u0026quot;CURRENT DIGITAL OUTPUT [\u0026quot; + output + \u0026quot;] STATE IS [\u0026quot;); System.out.println(output.state() + \u0026quot;]\u0026quot;); // pulse to HIGH state for 3 seconds System.out.println(\u0026quot;PULSING OUTPUT STATE TO HIGH FOR 3 SECONDS\u0026quot;); output.pulse(3, TimeUnit.SECONDS, DigitalState.HIGH); System.out.println(\u0026quot;PULSING OUTPUT STATE COMPLETE\u0026quot;); // shutdown Pi4J pi4j.shutdown();  "},{"id":16,"href":"/pages-to-integrate/04.documentation/09.about-the-code/02.download/02.direct-download/docs/","title":"Direct Download","parent":"Pages-to-integrates","content":"Direct downloads are not yet available.\nPlease build the project from sources available on GitHub Or acquire the compiled artifacts from the Maven SNAPSHOT repository.\n"},{"id":17,"href":"/pages-to-integrate/04.documentation/docs/","title":"Documentation ","parent":"Pages-to-integrates","content":""},{"id":18,"href":"/pages-to-integrate/04.documentation/09.about-the-code/02.download/docs/","title":"Download/Install","parent":"Pages-to-integrates","content":""},{"id":19,"href":"/pages-to-integrate/06.featured-projects/default/","title":"Featured Projects","parent":"Pages-to-integrates","content":"!!!! Did you use Pi4J in one of your projects? We would love to hear from you! Please let us know by sending an e-mail to frank at pi4j.com with a brief description, URL links and pictures of the product or project you are working on.\nplugin:content-inject\n"},{"id":20,"href":"/pages-to-integrate/03.getting-started/default/","title":"Getting Started","parent":"Pages-to-integrates","content":"Pi4J wants to provide the best possible solution for Java development on the Raspberry Pi for two use-cases.\n Do you want to develop an application without the need to touch the internal code of Pi4J?  !!! In that case you\u0026rsquo;re at the right place for all the documentation you need! In this section you can find multiple examples to get you started.\n Do you want to go a few steps further and contribute to Pi4J, extend it with additional plugins or understand how it is build? Then check the Documentation section.  "},{"id":21,"href":"/pages-to-integrate/04.documentation/09.about-the-code/02.download/01.getting-started-with-in-progress-v2/docs/","title":"Getting started with in-progress-V2","parent":"Pages-to-integrates","content":" Getting started with V2 in the state of June 3th of 2020.\nPi4J V2  Checkout the project pi4j-v2 Select JDK11, e.g. sdk use java 11.0.7.fx-librca In the root of pi4j-v2 run m̀vn clean install`\n[INFO] Executed tasks [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for Pi4J :: Parent POM 2.0-SNAPSHOT: [INFO] [INFO] Pi4J :: Parent POM ................................. SUCCESS [ 0.972 s] [INFO] Pi4J :: DOCKER :: Docker Parent POM .............. SUCCESS [ 0.290 s] [INFO] Pi4J :: TESTING :: Arduino Test Harness ........... SUCCESS [ 1.832 s] [INFO] Pi4J :: LIBRARY :: Libraries Parent POM ........... SUCCESS [ 0.064 s] [INFO] Pi4J :: LIBRARY :: JNI Wrapper for PIGPIO Library . SUCCESS [ 6.615 s] [INFO] Pi4J :: LIBRARY :: Java Library (CORE) ............ SUCCESS [ 6.260 s] [INFO] Pi4J :: PLUGIN :: Plugins Parent POM ............. SUCCESS [ 0.061 s] [INFO] Pi4J :: PLUGIN :: Mock Platform \u0026amp; Providers ...... SUCCESS [ 0.683 s] [INFO] Pi4J :: PLUGIN :: PIGPIO I/O Providers ........... SUCCESS [ 2.084 s] [INFO] Pi4J :: PLUGIN :: RaspberryPi Platform \u0026amp; Providers SUCCESS [ 0.447 s] [INFO] Pi4J :: TESTING :: Unit/Integration Tests ......... SUCCESS [ 2.350 s] [INFO] Pi4J :: EXAMPLE :: Sample Code .................... SUCCESS [ 0.632 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------   Example application Building the example application  Checkout the project Pi4J V.2 - Telegraph Demo Project Select JDK11, e.g. sdk use java 11.0.7.fx-librca In the root of pi4j-demo-telegraph run m̀vn clean install` Check the directory target\\distribution \u0026ndash;\u0026gt; this contains all the files to be copied to the Raspberry Pi\n/target/distribution/pi4j-core-2.0-SNAPSHOT.jar /target/distribution/pi4j-demo-telegraph-1.0-SNAPSHOT.jar /target/distribution/pi4j-library-pigpio-2.0-SNAPSHOT.jar /target/distribution/pi4j-plugin-pigpio-2.0-SNAPSHOT.jar /target/distribution/pi4j-plugin-raspberrypi-2.0-SNAPSHOT.jar /target/distribution/run.sh /target/distribution/slf4j-api-2.0.0-alpha0.jar /target/distribution/slf4j-simple-2.0.0-alpha0.jar   Running on the Raspberry Pi  After copying all files from target/distribution to a Raspberry Pi, start ./run.sh  "},{"id":22,"href":"/getting-started/","title":"Getting-starteds","parent":"Pi4J","content":""},{"id":23,"href":"/pages-to-integrate/04.documentation/09.about-the-code/07.hardware-testing/docs/","title":"Hardware testing","parent":"Pages-to-integrates","content":"To minimize the required time and efforts to test a new release, V2 aims to include an automated test which performs I/O testing on each I/O interface on each model of RPi. Ideally this would happen as part of the unit testing sequence for each code commit or at least as part of the release cycle.\nTo achieve this, an Arduino Due board with lots of on board I/O capability is being used. The firmware that gets loaded onto the Arduino board listens on the serial port for instructions on which pins to use and what type of test to perform. The \u0026ldquo;Test Harness\u0026rdquo; project also includes a Java library that is used to communicate with the Arduino and instrument tests.\nNext, a given I/O provider plugin includes test classes that instrument the test harness and perform live I/O testing between the SBC (or other hardware) and the Arduino Test Harness.\nTo be able to fully test all board types, a custom PCB needs to be created to perform all the interconnects between the Raspberry Pi 26-pin/40-pin headers and the Arduino board. This way enough test harnesses could be build for each Raspberry Pi model and have a permanent setup for on-demand testing. This of course is a huge effort just by itself, and perhaps too ambitious \u0026ndash; but seeking a means to reach automated testing is really needed for the long term.\n"},{"id":24,"href":"/pages-to-integrate/03.getting-started/10.io-examples/default/","title":"I/O Examples","parent":"Pages-to-integrates","content":"Here you can find detailed examples for the different functionalities of Pi4J per I/O type.\nThe supported low-level I/O interface types are defined in the core library as an enumerated list.\nANALOG_INPUT(AnalogInputProvider.class, AnalogInput.class, AnalogInputConfig.class, AnalogInputConfigBuilder.class), ANALOG_OUTPUT(AnalogOutputProvider.class, AnalogOutput.class, AnalogOutputConfig.class, AnalogOutputConfigBuilder.class), DIGITAL_INPUT(DigitalInputProvider.class, DigitalInput.class, DigitalInputConfig.class, DigitalInputConfigBuilder.class), DIGITAL_OUTPUT(DigitalOutputProvider.class, DigitalOutput.class, DigitalOutputConfig.class, DigitalOutputConfigBuilder.class), PWM(PwmProvider.class, Pwm.class, PwmConfig.class, PwmConfigBuilder.class), I2C(I2CProvider.class, com.pi4j.io.i2c.I2C.class, I2CConfig.class, I2CConfigBuilder.class), SPI(SpiProvider.class, Spi.class, I2CConfig.class, I2CConfigBuilder.class), SERIAL(SerialProvider.class, Serial.class, SerialConfig.class, SerialConfigBuilder.class);  "},{"id":25,"href":"/pages-to-integrate/03.getting-started/12.registry/docs/","title":"I/O Registry","parent":"Pages-to-integrates","content":"An additional V2 feature is an I/O registry where all I/O instances that have been created can be maintained, managed, re-accessed, etc. As the library keeps track of all the created I/O instances, they become publicly accessible through a registry where users can interrogate, iterate, identify and access all created I/O instances that Pi4J is managing.\nThis is very useful for add-ons/plugins that want to provide runtime information about the state of all I/O, for example a web app illustrating the current state of I/O.\nThe registry is responsible for managing I/O instance lifecycles and provides a means for your program to easily access any I/O instance using its unique identifier.\n"},{"id":26,"href":"/pages-to-integrate/04.documentation/09.about-the-code/02.download/04.install/docs/","title":"Installation","parent":"Pages-to-integrates","content":"This project is still in development and thus no package installers are available at this time.\n"},{"id":27,"href":"/pages-to-integrate/03.getting-started/10.io-examples/04.i2c/docs/","title":"Inter-Integrated Circuit (I²C)","parent":"Pages-to-integrates","content":"!! Please be aware there are some hardware issues when using the Raspberry Pi with devices that expect to be able to use clock stretching, for more info see \u0026ldquo;Adventures in I2C: clock stretching on the Raspberry Pi\u0026rdquo; and \u0026ldquo;I2C stretch bug. Been fixed or not?\u0026rdquo;.\nPage content goes here.\n"},{"id":28,"href":"/pages-to-integrate/01.home/05.license/docs/","title":"License (Open Source)","parent":"Pages-to-integrates","content":"The Pi4J Version 2.0 project is distributed and licensed under the Apache License, Version 2.0 license. (A business-friendly OSS license) * https://www.apache.org/licenses/LICENSE-2.0 * https://github.com/Pi4J/pi4j-v2/blob/master/LICENSE.txt\n Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (C) 2012 - 2019 Pi4J Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.   "},{"id":29,"href":"/pages-to-integrate/03.getting-started/09.io-events/docs/","title":"Listening for I/O Events","parent":"Pages-to-integrates","content":"Your page content goes here.\n"},{"id":30,"href":"/pages-to-integrate/03.getting-started/04.logging/docs/","title":"Logging with SLF4J","parent":"Pages-to-integrates","content":"Pi4J uses SLF4J for logging. To include it in your project, add this Maven dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-simple\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.0-alpha0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  There are different ways to configure the logging output, as described on the SLF4J website, but the shortest is probably with this property in your main-method:\n public static void main(String[] args) throws Exception { // Configure default lolling level, accept a log level as the first program argument System.setProperty(\u0026quot;org.slf4j.simpleLogger.defaultLogLevel\u0026quot;, \u0026quot;INFO\u0026quot;); // Your code comes here }  "},{"id":31,"href":"/pages-to-integrate/04.documentation/09.about-the-code/02.download/03.repository/docs/","title":"Maven Repository","parent":"Pages-to-integrates","content":"Pi4J V.2 is not yet released or published to Maven Central.\nPlease build the project from sources available on GitHub Or acquire the compiled artifacts from this Maven SNAPSHOT repository.\n"},{"id":32,"href":"/pages-to-integrate/04.documentation/09.about-the-code/04.maven-settings/docs/","title":"Maven settings","parent":"Pages-to-integrates","content":"To simplify development but not commit sensitive information, you can add personal or PC-specific settings in the Maven settings.xml file. This file is stored or needs to be created in the \u0026ldquo;.m2\u0026rdquo; directory in your home directory: * Windows: C:\\Users\\YOUR_NAME.m2 * Linux: /home/YOUR_NAME/.m2 * Mac: /Users/YOUR_NAME/.m2\nFor more info see this article on Baeldung.\nThis is an example settings file, including settings for compiling of Pi4J and credentials to upload the generated code to a Raspberry Pi.\n\u0026lt;settings xmlns=\u0026quot;http://maven.apache.org/SETTINGS/1.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\u0026quot;\u0026gt; \u0026lt;localRepository/\u0026gt; \u0026lt;interactiveMode/\u0026gt; \u0026lt;offline/\u0026gt; \u0026lt;pluginGroups/\u0026gt; \u0026lt;servers/\u0026gt; \u0026lt;mirrors/\u0026gt; \u0026lt;proxies/\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;pi4j\u0026lt;/id\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;!-- Docker compiler settings --\u0026gt; \u0026lt;pi4j.native.compiler\u0026gt;DOCKER-COMPILER\u0026lt;/pi4j.native.compiler\u0026gt; \u0026lt;!-- SSH credentials of your test Raspberry Pi --\u0026gt; \u0026lt;pi4j.dev.transfer\u0026gt;false\u0026lt;/pi4j.dev.transfer\u0026gt; \u0026lt;pi4j.dev.host\u0026gt;192.168.1.1\u0026lt;/pi4j.dev.host\u0026gt; \u0026lt;pi4j.dev.port\u0026gt;22\u0026lt;/pi4j.dev.port\u0026gt; \u0026lt;pi4j.dev.user\u0026gt;pi\u0026lt;/pi4j.dev.user\u0026gt; \u0026lt;pi4j.dev.password\u0026gt;raspberry\u0026lt;/pi4j.dev.password\u0026gt; \u0026lt;pi4j.dev.directory\u0026gt;/home/pi/pi4j-temp\u0026lt;/pi4j.dev.directory\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;activeProfiles\u0026gt; \u0026lt;activeProfile\u0026gt;pi4j\u0026lt;/activeProfile\u0026gt; \u0026lt;/activeProfiles\u0026gt; \u0026lt;/settings\u0026gt;  "},{"id":33,"href":"/getting-started/minimal-example-application/","title":"Minimal example application with a LED and button","parent":"Getting-starteds","content":" !!! In the \u0026ldquo;pi4j-example-minimal\u0026rdquo; GitHub project you can find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further described on this page. The application will toggle a a LED on/off and each time you press the button, the toggling speed increases. When you have pushed the button 5 times, the application stops.\nWiring This minimal example application uses this wiring:\nDependency in pom.xml !!! The description on this page handles the Maven approach, but the same project can also be built with Gradle, and the \u0026ldquo;build.gradle\u0026rdquo; file is included in the sources.\n!! At this moment Pi4J V2 is not yet released, so you\u0026rsquo;ll need to add the snapshot repository.\n \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;oss-snapshots-repo\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Sonatype OSS Maven Repository\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://oss.sonatype.org/content/groups/public\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;false\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt;  In this project we will be using slf4 for logging, pi4j-core and the pi4j-plugins for the Raspberry Pi and PiGPIO. To make the versions easy to update, we add those numbers as properties.\n \u0026lt;properties\u0026gt; \u0026lt;!-- DEPENDENCIES VERSIONS --\u0026gt; \u0026lt;slf4j.version\u0026gt;2.0.0-alpha0\u0026lt;/slf4j.version\u0026gt; \u0026lt;pi4j.version\u0026gt;2.0-SNAPSHOT\u0026lt;/pi4j.version\u0026gt; \u0026lt;/properties\u0026gt;  These are the dependencies we need:\n \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${slf4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-simple\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${slf4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- include Pi4J Core --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.pi4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pi4j-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${pi4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- include Pi4J Plugins (Platforms and I/O Providers) --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.pi4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pi4j-plugin-raspberrypi\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${pi4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.pi4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pi4j-plugin-pigpio\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${pi4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt;  Pi4J code blocks which are used Initialization Before you can use Pi4J you must initialize a new runtime context.\nThe \u0026lsquo;Pi4J\u0026rsquo; static class includes a few helper context creators for the most common use cases. The \u0026lsquo;newAutoContext()\u0026rsquo; method will automatically load all available Pi4J extensions found in the application\u0026rsquo;s classpath which may include \u0026lsquo;Platforms\u0026rsquo; and \u0026lsquo;I/O Providers\u0026rsquo;.\nvar pi4j = Pi4J.newAutoContext();  Output Pi4J Context information The library contains helper functions to output info about the available and used platforms and providers. To keep the example code clean, these are part of the \u0026ldquo;PrintInfo.java\u0026rdquo; class. For example to print the loaded platforms:\nPlatforms platforms = pi4j.platforms(); console.box(\u0026quot;Pi4J PLATFORMS\u0026quot;); console.println(); platforms.describe().print(System.out); console.println();  Handle the button presses To handle digital input events we first need a configuration for it. With that configuration, Pi4J can create the object for us and the state changes can be handled.\nprivate static int pressCount = 0; private static final int PIN_BUTTON = 24; // PIN 18 = BCM 24 var buttonConfig = DigitalInput.newConfigBuilder(pi4j) .id(\u0026quot;button\u0026quot;) .name(\u0026quot;Press button\u0026quot;) .address(PIN_BUTTON) .pull(PullResistance.PULL_DOWN) .debounce(3000L) .provider(\u0026quot;pigpio-digital-input\u0026quot;); var button = pi4j.create(buttonConfig); button.addListener(e -\u0026gt; { if (e.state() == DigitalState.LOW) { pressCount++; console.println(\u0026quot;Button was pressed for the \u0026quot; + pressCount + \u0026quot;th time\u0026quot;); } });  Toggle a LED For the LED we use a similar approach with a configuration. The created led-object can be used to toggle its state.\nprivate static final int PIN_LED = 22; // PIN 15 = BCM 22 var ledConfig = DigitalOutput.newConfigBuilder(pi4j) .id(\u0026quot;led\u0026quot;) .name(\u0026quot;LED Flasher\u0026quot;) .address(PIN_LED) .shutdown(DigitalState.LOW) .initial(DigitalState.LOW) .provider(\u0026quot;pigpio-digital-output\u0026quot;); var led = pi4j.create(ledConfig); while (pressCount \u0026lt; 5) { if (led.equals(DigitalState.HIGH)) { led.low(); } else { led.high(); } Thread.sleep(500 / (pressCount + 1)); }  Closing the application Before the application quits, we need to call the \u0026lsquo;shutdown()\u0026rsquo; function on the Pi4J static helper class. This will ensure that all I/O instances are properly shutdown, released by the the system and shutdown in the appropriate manner. Terminate will also ensure that any background threads/processes are cleanly shutdown and any used memory is returned to the system.\npi4j.shutdown();  Steps to run this application on your Raspberry Pi  Attach a LED and button as shown in the image above Use a recent Raspbian OS image which has Java 11. To check if you have the correct Java version in the terminal:\n$ java -version openjdk version \u0026quot;11.0.6\u0026quot; 2020-01-14 OpenJDK Runtime Environment (build 11.0.6+10-post-Raspbian-1deb10u1) OpenJDK Server VM (build 11.0.6+10-post-Raspbian-1deb10u1, mixed mode)  Download the project from GitHub and build it:\n$ git clone https://github.com/Pi4J/pi4j-example-minimal.git $ cd pi4j-example-minimal/ $ mvn clean package  Change to the distribution directory where you can find the generated package and required Java-modules. Start it with the provided run.sh script:\n$ cd target/distribution $ ls -l total 644 -rw-r--r-- 1 pi pi 364456 Jun 19 10:04 pi4j-core-2.0-SNAPSHOT.jar -rw-r--r-- 1 pi pi 7243 Jun 19 10:04 pi4j-example-minimal-0.0.1.jar -rw-r--r-- 1 pi pi 142461 Jun 19 10:04 pi4j-library-pigpio-2.0-SNAPSHOT.jar -rw-r--r-- 1 pi pi 37302 Jun 19 10:04 pi4j-plugin-pigpio-2.0-SNAPSHOT.jar -rw-r--r-- 1 pi pi 26917 Jun 19 10:04 pi4j-plugin-raspberrypi-2.0-SNAPSHOT.jar -rwxr-xr-x 1 pi pi 101 Jun 19 10:04 run.sh -rw-r--r-- 1 pi pi 52173 Jun 19 10:04 slf4j-api-2.0.0-alpha0.jar -rw-r--r-- 1 pi pi 15372 Jun 19 10:04 slf4j-simple-2.0.0-alpha0.jar $ sudo ./run.sh  The output will first show you some info about the platforms and providers. Then the LED starts blinking and shows how much times you pushed the button:\nLED high LED low LED high Button was pressed for the 1th time LED low LED high Button was pressed for the 2th time LED low LED high LED low LED high Button was pressed for the 3th time LED low LED high LED low LED high Button was pressed for the 4th time LED low LED high LED low LED high Button was pressed for the 5th time   "},{"id":34,"href":"/pages-to-integrate/04.documentation/08.advanced/03.library-path/docs/","title":"Native Library Path","parent":"Pages-to-integrates","content":" Overview Some Pi4J plugins, such as the Pi4J PiGpio Provider plugin, depend on native JNI libraries to communicate with the underlying system. By default Pi4J embeds these native libraries as resources inside the plugin\u0026rsquo;s JAR file. At runtime Pi4J extracts the native library into a temporary directory so the JVM can load the library from the filesystem. Upon termination the temporary file is automatically removed.\nThis automatic extration behavior works well for most users; however, there are certain edge cases where this may fail. On failure, its common to see a UnsatisfiedLinkError on startup of your application or when you create a Pi4J context. Edge cases such as the following may require customization of the runtime to deal with native library loading.\n Systems that do not support a writable temporary directory (/tmp) may encounter the UnsatisfiedLinkError and fail to load the native library. Systems with very strict security policies may encounter the UnsatisfiedLinkError and fail to load the native library if unable to extract the resource from the JAR at runtime. Users attempting to use Pi4J under Android may also experience the UnsatisfiedLinkError and fail to load the native library.  Explicitly Define the Library Path In the event of a failure to extract and load the embedded native library from the JAR file at runtime, a user can override this default behavior by defining the system property: pi4j.library.path.\nUsage: pi4j.library.path=(system|/some/directory)  Values:    Property Value Description     system The default system defined library path for the JVM (java.library.path) will be used to resolve the native libraries.   local Native libraries will be resolved in the same local directory as the plugin JAR file on the file system.   absolute file path(/some/directory) This user defined library path (absolute filesystem path) will be used to resolve the native libraries.    Examples: The pi4j.library.path system property can be assigned in the command line used to launch your Java application using the -D flag.\njava --Dpi4j.library.path=\u0026quot;system\u0026quot; ... -or- java --Dpi4j.library.path=\u0026quot;local\u0026quot; ... -or- java --Dpi4j.library.path=\u0026quot;/some/directory\u0026quot; ...  The pi4j.library.path system property can be assigned in your code at startup and prior to creating a Pi4J Context.\nSystem.setProperty(\u0026quot;pi4j.library.path\u0026quot;, \u0026quot;/some/directory\u0026quot;); -or- System.setProperty(\u0026quot;pi4j.library.path\u0026quot;, \u0026quot;system\u0026quot;); -or- System.setProperty(\u0026quot;pi4j.library.path\u0026quot;, \u0026quot;local\u0026quot;);  !!! Note: \u0026nbsp;\u0026nbsp; For more details about the native library loading behavior, please see the NativeLibraryLoader.java class: https://github.com/Pi4J/pi4j-v2/blob/master/libraries/pi4j-library-pigpio/src/main/java/com/pi4j/library/pigpio/util/NativeLibraryLoader.java\nWhere To Get The Native Libraries The Pi4J native libraries can be obtained by extracting the architecture specific libpi4j-xxx.so file from the plugin JAR file\u0026rsquo;s resources.\nAdditionally, the Pi4J native libraries are published as independant artifacts in the Maven Repository: https://oss.sonatype.org/#nexus-search;quick~pi4j-library-pigpio\n"},{"id":35,"href":"/pages-to-integrate/","title":"Pages-to-integrates","parent":"Pi4J","content":""},{"id":36,"href":"/","title":"Pi4J","parent":"","content":""},{"id":37,"href":"/pages-to-integrate/03.getting-started/07.chose-provider/01.pigpio/docs/","title":"PiGpio","parent":"Pages-to-integrates","content":"Your page content goes here.\n"},{"id":38,"href":"/pages-to-integrate/06.featured-projects/01.pijukebox-by-daniel-martensson/docs/","title":"PiJukeBox by Daniel Mårtensson","parent":"Pages-to-integrates","content":" PiJukeBox by Daniel Mårtensson Daniel used Java and Pi4J to turn an old Centrum U68 from 1940 into a MP3 player. The reason is because short wave, middle wave and long wave is today obsolete and not being used or sended today in Sweden. Also the electronics inside was a mess and very dangerous because it runs on both AC/DC current and all the wires began to lose their isolators.\nFeatures: autoplaying next song, 60 songs included, volume tuning, song select, low power consumption, works with old Raspberry Pi\u0026rsquo;s, terminal based.\nWith a Raspberry Pi B+, OpenJDK 8 and Pi4J inside this radio, it became a juke box. The sources are available on github.com/DanielMartensson/PiJukeBox\n"},{"id":39,"href":"/pages-to-integrate/03.getting-started/01.pin-numbering/docs/","title":"Pin numbering","parent":"Pages-to-integrates","content":"Pi4J V1 took a pretty opinionated approach to pin numbering as the scheme was based on the underlying WiringPi. This scheme was incompatibility with other pin diagrams and pin numbering used by other development platforms and libraries.\nAs Pi4J V2 is build as a \u0026ldquo;pass thru library\u0026rdquo;, and uses PiGpio as the underlying framework, the more well-known BCM numbering is being used now.\nThis drawing shows the different numbers for WiringPi and BCM in a 40-pins Raspberry Pi header:\n"},{"id":40,"href":"/pages-to-integrate/04.documentation/08.advanced/07.plugins/docs/","title":"Plug-ins","parent":"Pages-to-integrates","content":"The goal of Pi4J V2 is to provide a solid base with all required \u0026ldquo;minimal functionality\u0026rdquo; while at the same time, promote third-party development and extensibility, thus enabling developers to build and maintain their extensions outside of the Pi4J core projects codebase.\nThis will enable us to deliver a stable, fully tested framework as the number of features inside of Pi4J can be limited and support for specific I/O hardware can be provided with an extension for Pi4J.\nMore info about how this extensibility is achieved:\n Extensible I/O hardware PROVIDERS: things like GPIO expanders, I2C bus expanders, GertBoard, add-on hardware shields, etc. Extensible SBC platforms PLATFORMS: the core project may only support Raspberry Pi, but the platform and libraries should be written to allow a third party to create plugins for alternate hardware platforms/boards. Extensible plugins.  Plugins are extensible service modules that interact with or augment the Pi4J infrastructure. The most common plugins are I/O Providers and Platforms. Other plugin examples could be a web app to view/control the Pi4J runtime state/status, some third-party observer to the Pi4J runtime state/status,\u0026hellip;\nPlugins are implemented as Java modules using Service Provider Interfaces (SPI).\nPlugins must declare their pluggable interface in their \u0026ldquo;module-info.java\u0026rdquo; config file. Example from the Raspberry plugin:\nmodule com.pi4j.plugin.raspberrypi { requires com.pi4j; exports com.pi4j.plugin.raspberrypi; exports com.pi4j.plugin.raspberrypi.platform; exports com.pi4j.plugin.raspberrypi.provider.gpio.digital; exports com.pi4j.plugin.raspberrypi.provider.pwm; exports com.pi4j.plugin.raspberrypi.provider.serial; exports com.pi4j.plugin.raspberrypi.provider.spi; exports com.pi4j.plugin.raspberrypi.provider.i2c; provides com.pi4j.extension.Plugin with RaspberryPiPlugin; }"},{"id":41,"href":"/pages-to-integrate/01.home/01.previous-version-v1/default/","title":"Previous versions (V1)","parent":"Pages-to-integrates","content":" On this site you can find all detailed info with a lot of examples for the second generation of Pi4J which requires Java 11.\nDocumentation of the 1.X versions Pi4J Version 1.4  ONGOING Experimental build using JDK11 Not using Java-modules, this will be part of the V2  Pi4J Version 1.3  ONGOING Adds support for Rpi4B and minor bug fixes Based on JDK8  Pi4J Version 1.2  Released 2019-02-26 Based on Java 8 Documentation website V1.2  Pi4J Version 1.1  Released 2016-07-26 Documentation webiste V1.1  Pi4J Version 1.0  Released 2015-04-18 Documentation website V1.0  "},{"id":42,"href":"/pages-to-integrate/01.home/03.status/docs/","title":"Project Status","parent":"Pages-to-integrates","content":" Project Status/Summary Version 2.0 of Pi4J is finally starting to come together and is almost ready for some real-world BETA testing. Significant progress has been made on the general architecture and primary user-facing interfaces. Pi4J V.2 is a complete re-write and does not maintain API compatibility with previous versions. It is not intended to be a drop-in replacement for previous versions of Pi4J. Pi4J V.2 is a completely new design bringing modern conventions, development practices, extensibility support and simplified integration experience for Pi4J users.\n!! Pi4J Version 2.0 is still considered EXPERIMENTAL at this point. While many parts of the project are working, there are still a number of areas that require further development and certain APIs are subject to change without notice. A significant portion of the code is presently undocumented and hardware integration testing is incomplete. It is not recommended to use Pi4J V.2 in any production workload at this time.\nFeature/Component Status The following tables outlines some of the current (high-level) features planned for V.2 release. Please note that some of these features may get deferred and not incuded in the first release.\n   ARCHTECTURAL COMPONENTS STATUS PRIORITY     Runtime Context [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   I/O Registry [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   Platforms [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-up /] HIGH   Providers [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   Dependency Injection [fa=fa-flask /] In Research [fa=fa-arrow-circle-up /] HIGH       CORE FEATURES STATUS PRIORITY     Remote I/O (via TCP) [fa=fa-cogs /] InTesting [fa=fa-arrow-circle-up /] HIGH   Executor Service [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-up /] HIGH   GPIO Pulse [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-up /] HIGH   GPIO Blink [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-up /] HIGH       I/O PLUGINS STATUS PRIORITY     PiGpio GPIO Provider Plugin [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   PiGpio SPI Provider Plugin [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   PiGpio SERIAL Provider Plugin [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   PiGpio I2C Provider Plugin [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   PiGpio PWM Provider Plugin [fa=fa-cogs /] In Testing [fa=fa-arrow-circle-up /] HIGH   \u0026mdash; \u0026mdash; \u0026mdash;   LinuxFX GPIO Provider Plugin [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-down /] LOW   LinuxFX SPI Provider Plugin [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-down /] LOW   LinuxFX SERIAL Provider Plugin [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-down /] LOW   LinuxFX I2C Provider Plugin [fa=fa-hourglass-half /] Incomplete [fa=fa-arrow-circle-down /] LOW   \u0026mdash; \u0026mdash; \u0026mdash;   WiringPi GPIO Provider Plugin [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW   WiringPi SPI Provider Plugin [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW   WiringPi I2C Provider Plugin [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW   WiringPi PWM Provider Plugin [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW   \u0026mdash; \u0026mdash; \u0026mdash;   PiGpio Bitbang Serial [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW   PiGpio Bitbang I2C [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW   PiGpio Bitbang SPI [fa=fa-hourglass-o /] Not Started [fa=fa-arrow-circle-down /] LOW    Hardware Testing Status The table below illustrates the testing progress on the various supported platforms/models.\nAs standard OpenJDK versions are not available for the ARMv6 these are considered to be low priority.\n| PLATFORM/MODEL | ARM | STATUS | PRIORITY | |\u0026mdash; |\u0026mdash; |\u0026mdash; | | RaspberryPi - 4B | ARMv8 | [fa=fa-cogs /] In Testing; Preliminary Tests PASSED | [fa=fa-arrow-circle-up /] HIGH | |\u0026mdash; |\u0026mdash; |\u0026mdash; | | RaspberryPi - 3A+ | ARMv8 | [fa=fa-hourglass-o /] Not Started | [fa=fa-arrow-circle-up /] HIGH | | RaspberryPi - 3B+| ARMv8 | [fa=fa-cogs /] In Testing; Preliminary Tests PASSED | [fa=fa-arrow-circle-up /] HIGH | | RaspberryPi - 3B | ARMv8 | [fa=fa-cogs /] In Testing; Preliminary Tests PASSED | [fa=fa-arrow-circle-up /] HIGH | |\u0026mdash; |\u0026mdash; |\u0026mdash; | | RaspberryPi - ZeroW | ARMv6 | [fa=fa-times /] Not Supported | [fa=fa-arrow-circle-down /] LOW | | RaspberryPi - Zero | ARMv6 | [fa=fa-times /] Not Supported | [fa=fa-arrow-circle-down /] LOW | |\u0026mdash; |\u0026mdash; |\u0026mdash; | | RaspberryPi - 2B (v1.2) | ARMv8 | [fa=fa-hourglass-o /] Not Started | [fa=fa-circle /] MEDIUM | | RaspberryPi - 2B | ARMv7 | [fa=fa-hourglass-o /] Not Started | [fa=fa-circle /] MEDIUM | | RaspberryPi - 1B+ | ARMv6 | [fa=fa-times /] Not Supported | [fa=fa-arrow-circle-down /] LOW | | RaspberryPi - 1A+ | ARMv6 | [fa=fa-times /] Not Supported | [fa=fa-arrow-circle-down /] LOW | | RaspberryPi - 1B (Rev 2) | ARMv8 | [fa=fa-hourglass-o /] Not Started | [fa=fa-circle /] MEDIUM | | RaspberryPi - 1B (Rev 1) | ARMv7 | [fa=fa-hourglass-o /] Not Started | [fa=fa-circle /] MEDIUM | | RaspberryPi - 1A | ARMv6 | [fa=fa-times /] Not Supported | [fa=fa-arrow-circle-down /] LOW | |\u0026mdash; |\u0026mdash; |\u0026mdash; | | RaspberryPi - CM3+ (Compute Module) | ARMv8 | [fa=fa-hourglass-o /] Not Started | [fa=fa-arrow-circle-up /] HIGH | | RaspberryPi - CM3 (Compute Module) | ARMv8 | [fa=fa-hourglass-o /] Not Started | [fa=fa-arrow-circle-up /] HIGH | | RaspberryPi - CM1 (Compute Module) | ARMv6 | [fa=fa-times /] Not Supported | [fa=fa-arrow-circle-down /] LOW |\n"},{"id":43,"href":"/pages-to-integrate/04.documentation/09.about-the-code/01.project-structure/docs/","title":"Project structure","parent":"Pages-to-integrates","content":" To ensure the Pi4J V2 project is easy to maintain, there is a clear separation between the core functions and isolated test, example and plugin projects.\nOn this page we want to give you an overview of the projects which are part of the GitHub Pi4J Project.\nPi4J V2 Main project  github.com/Pi4J/pi4j-v2 This is the main Pi4J V2 project providing all (basic) I/O functionalities.  Pi4J Parent POM  /pom.xml This is \u0026ldquo;the grandparent POM\u0026rdquo; and the place to build the entire project.  Pi4J Libraries  /libraries/* This folder contains (JNI native) libraries that Pi4J or Pi4J plugins may require for runtime. Libraries are not Pi4J extension, plugins, providers, platforms, etc. At this moment only a PiGpio library is included, but could be extended in the future. By isolation the native functions in libraries, the underlying I/O interface can easily be replaced later without breaking the core library.  Pi4J Libraries Parent POM  /libraries/pi4j-library/pom.xml Base library to be used when creating a new library. Contains the parent pom.xml-file for all library implementations.  Pi4J PiGPIO JNI Wrapper Library  /libraries/pi4j-library-pigpio This library is a Java library to wrap the PiGPIO API and implement the JNI layer to facilitate use of PiGPIO in Java.\n There is no Pi4J specific API or code in this library. This PiGPIO wrapper can be used directly without using the Pi4J-core but in that case your application highly depends on the methods of PiGPIO and will be very hard to refactor if you need to use another wrapper.  Pi4J Core Library  /pi4j-core This is the Pi4J V2 API and core implementation of the framework and runtime.\n Doesn\u0026rsquo;t contain any actual I/O providers, platforms or IO/platform implementation \u0026ndash;\u0026gt; those are all provided via extensions/plugins.\n  Pi4J Unit/Integration Test  /pi4j-test This is intended to be a place for unit and integration tests to test the APIs and features. It only performs tests using MOCK I/O via the Mock IO Provider (plugin). It should not attempt to perform any real I/O testing.  Pi4J Plugins: the actual I/O providers, platforms and implementations  /plugins/* This folder contains any plugins for use with Pi4J such as IO providers, platforms, or extensions.\n Plugins must implement the Pi4J Plugin Interface (com.pi4j.extension.Plugin) and declare the implementation class using the \u0026ldquo;provides\u0026rdquo; directive in the module info class. See for an example in /plugins/pi4j-plugin-mock/src/main/java/module-info.java  Pi4J Libraries Parent POM  /plugins/pi4j-plugin/pom.xml* Base library to be used when creating a new plugin. Contains the parent pom.xml-file for all plugin implementations.  Pi4J LinuxFS Provider  /plugins/pi4j-plugin-linuxfs This plugin is intended to implement I/O Providers for Linux file system operations such as SERIAL, SPI, I2C and perhaps basic GPIO.\n This plugin is mostly empty at this moment. Goal is to have an I/O Provider which is totally independant of an underlying program.  Pi4J Mock Platform \u0026amp; Provider  /plugins/pi4j-plugin-mock This plugin implements both a Mock Platform and Mock I/O Providers for every I/O type supported by Pi4J. This Mock plugin is used by the unit and integration testing project.  Pi4J PiGPIO Provider  /plugins/pi4j-plugin-pigpio This plugin implements I/O Providers for every I/O type supported by the PiGPIO library.\n At this moment, this single plugin supports both ** local/native connectivity to PiGPIO ** remote (TCP) connectivity to PiGPIO ** TO BE DISCUSSED: Perhaps this should be separated into two plugins? Or moved to a separate \u0026ldquo;remote connectivity project\u0026rdquo;?  Pi4J RaspberryPi Platform \u0026amp; Provider  /plugins/pi4-plugin-raspberrypi This plugin is intended to implement the Provider for the Raspberry Pi models and declare the default I/O providers for each of the I/O types supported by each RPi model.  Pi4J WiringPi Provider  NOT IN THE PROJECT CODE This plugin was intended to implement I/O Providers for use with the WiringPi library, similar to the PiGPIO provider.\n However with the WiringPi project no longer being maintained publicly, this plugin was not implemented  Stand-alone projects Pi4J Test Harness  github.com/Pi4J/pi4j-test-harness This project contains the source code (both Java library and Arduino code) for the hardware test harness which has been created to eventually perform hardware testing at the physical layer to help speed up verification for each RPI hardware model Current state is very rough but functional.\n This project has been moved outside of the core project as this is only used for the validation test cycle before releasing a new version. For more info, see \u0026ldquo;Hardware testing\u0026rdquo;  Pi4J Example projects Pi4J Examples  github.com/Pi4J/pi4j-examples This project contains numerous code examples to demonstrate how to use Pi4J Certain functions have examples to reach the same goal with different use types, e.g. initialization of a DigitalInput with code, properties and annotations.  Pi4J Minimal example  github.com/Pi4J/pi4j-example-minimal Example project only showing the use of a digital input and output with minimal code but a lot of comments  Pi4J Telegraph example  github.com/Pi4J/pi4j-example-telegraph Example project demonstrated during Oracle Code One 2019  "},{"id":44,"href":"/pages-to-integrate/03.getting-started/10.io-examples/03.pwm/docs/","title":"Pulse Width Modulation (PWM)","parent":"Pages-to-integrates","content":"The RaspberryPi hardware supports 2 hardware PWM channels. But as Pi4J uses PiGPIO \u0026ldquo;under the hood\u0026rdquo;, we can take advantage of the\nThe Raspberry Pi supports 2 hardware based PWM channels. You can access these two channels via 2 separate sets of 4 GPIO header pins. But still limited to only 2 channels (2 unique PWM timing configurations).\nThe same PWM channel is available on multiple GPIO. The latest frequency and dutycycle setting will be used by all GPIO which share a PWM channel. The GPIO must be one of the following: 12 PWM channel 0 All models but A and B 13 PWM channel 1 All models but A and B 18 PWM channel 0 All models 19 PWM channel 1 All models but A and B 40 PWM channel 0 Compute module only 41 PWM channel 1 Compute module only 45 PWM channel 1 Compute module only 52 PWM channel 0 Compute module only 53 PWM channel 1 Compute module only  As Pi4J is using PiGPIO \u0026ldquo;under the hood\u0026rdquo;, you can take advantage of the additional PWM functionalities of it. PiGPIO is providing additional (soft) PWM support to any of the GPIO pins (0-31) and its using some hardware timing technique to optimize performance \u0026mdash; but its not the same as the actual hardware PWM pins natively on the RaspberryPi. In the Pi4J API, we call this \u0026ldquo;Software\u0026rdquo; PWM and you would need to set .pwmType(PwmType.SOFTWARE). We consider this software-based PWM because its being provided at a software layer, in this case by the PIGPIO library.\nIf you need more than 2 PWM pins, use the software PWM functionality, it may be perfectly fine for your application. If they are not good enough, then you will probably need a PWM expander board/chip (controlled by I2C/SPI) to provide additional PWM support.\n!! TODO add example code\n"},{"id":45,"href":"/pages-to-integrate/03.getting-started/06.chose-platform/01.raspberry-pi/docs/","title":"Raspberry Pi","parent":"Pages-to-integrates","content":"Your page content goes here.\n"},{"id":46,"href":"/pages-to-integrate/01.home/04.release-notes/docs/","title":"Release Notes","parent":"Pages-to-integrates","content":"Release note are not available as this project does not yet have any releases.\nPlease see the Project Status page for up to date information about the current development state of this project.\n"},{"id":47,"href":"/pages-to-integrate/04.documentation/08.advanced/08.remote-support/docs/","title":"Remote support","parent":"Pages-to-integrates","content":"One of the big features on the wish-list for V2: native support for remote I/O capability. Predominantly to support the ability for a user to perform development work on their desktop/laptop and be able to run their project with remote support slaving the I/O to a daemon running on the Raspberry Pi (or other supported SBC).\n!! TO BE DECIDED: the V2 codebase does support this currently by using the PiGpio daemon. This may be an OK place to start for the first release, but a separate Pi4J daemon may be ideal for a long term solution to capture some of the edge cases and provide remote I/O capability no matter which underlying I/O library is being used.\n"},{"id":48,"href":"/pages-to-integrate/03.getting-started/10.io-examples/06.serial/docs/","title":"Serial (UART/RS232)","parent":"Pages-to-integrates","content":"Page content goes here.\n"},{"id":49,"href":"/pages-to-integrate/03.getting-started/10.io-examples/05.spi/docs/","title":"Serial Peripheral Interface (SPI)","parent":"Pages-to-integrates","content":"Page content goes here.\n"},{"id":50,"href":"/pages-to-integrate/03.getting-started/13.shutdown/docs/","title":"Shutting down the Pi4J Context","parent":"Pages-to-integrates","content":"At the end of our application, the context needs to be shutdown to release the I/O and clean up the used resources.\n# Start of program var pi4j = Pi4J.newAutoContext(); # YOUR CODE GOES HERE # End of program pi4j.shutdown();  "},{"id":51,"href":"/pages-to-integrate/04.documentation/09.about-the-code/02.download/05.source/docs/","title":"Source Repository (GitHub)","parent":"Pages-to-integrates","content":""},{"id":52,"href":"/tags/","title":"Tags","parent":"Pi4J","content":""},{"id":53,"href":"/pages-to-integrate/03.getting-started/02.the-correct-java-version/default/","title":"The correct Java version","parent":"Pages-to-integrates","content":" To use Pi4J V2 you\u0026rsquo;ll need Java 11 or newer. Luckily this version is included in the current version of Raspbian OS. In the release notes of Raspbian you can see that the version of 2019-06-20 includes OpenJDK Java 11:\n2019-06-20: Based on Debian Buster Oracle Java 7 and 8 replaced with OpenJDK 11  But you will need to keep in mind this version is only compatible with ARMv7 or higher and doesn\u0026rsquo;t support all Rapberry Pi board versions.\nBoards with ARMv6 processor:\n Raspberry Pi 1 A and A+ Raspberry Pi 1 B and B+ Compute Module 1 Zero 1.2, 1.3 and W  Boards with ARMv7 or ARMv8 processor:\n Model A+, version 3 Model B, version 2, 3 and 4 Compute Module, version 3  Check the installed Java version If you prepared a microSD card with the latest version of Raspbian OS (full version), you can check the installed Java version in the terminal. On a board with ARMv7 or ARMv8 you will get this result:\n$ java -version openjdk version \u0026quot;11.0.3\u0026quot; 2019-04-16 OpenJDK Runtime Environment (build 11.0.3+7-post-Raspbian-5) OpenJDK Server VM (build 11.0.3+7-post-Raspbian-5, mixed mode)  On an ARMv6 version, you will get an error:\n$ java -version Error occurred during initialization of VM Server VM is only supported on ARMv7+ VFP  Check your board version If you are not sure which type of board you have, you can check this in the terminal with “cat /proc/cpuinfo”, for instance for a Raspberry Pi B+ 1.2:\n$ cat /proc/cpuinfo processor\t: 0 model name\t: ARMv6-compatible processor rev 7 (v6l) BogoMIPS\t: 697.95 Features\t: half thumb fastmult vfp edsp java tls CPU implementer\t: 0x41 CPU architecture: 7 CPU variant\t: 0x0 CPU part\t: 0xb76 CPU revision\t: 7 Hardware\t: BCM2835 Revision\t: 0010 Serial\t: 000000005f9ba615 Model\t: Raspberry Pi Model B Plus Rev 1.2  Install Java 11 on ARMv6 The sources for Java are available as open-source on OpenJDK, which means, if you can\u0026rsquo;t find the correct version for a specific board, it is possible to compile it yourself. Luckily there are different suppliers providing ready-made packages of the JDK for multiple platforms. But only Azul seems to have one which is a perfect fit for Raspberry Pi\u0026rsquo;s with an ARMv6: the Zulu community edition of JDK 11.\nTo get started with Zulu JDK, download and uncompress it to your board:\n$ cd /usr/lib/jvm $ sudo wget https://cdn.azul.com/zulu-embedded/bin/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf.tar.gz $ sudo tar -xzvf zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf.tar.gz $ sudo rm zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf.tar.gz $ ls -l total 12 lrwxrwxrwx 1 root root 21 Jul 23 15:58 java-1.11.0-openjdk-armhf -\u0026gt; java-11-openjdk-armhf drwxr-xr-x 9 root root 4096 Aug 20 11:41 java-11-openjdk-armhf drwxr-xr-x 2 root root 4096 Aug 20 11:41 openjdk-11 drwxrwxr-x 10 111 122 4096 Jul 10 16:50 zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf  Now we have the JDK11 ready to be used, but it still needs to be configured so the OS is aware of it.\n$ sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf/bin/java 1 $ sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf/bin/javac 1  At this moment we can select the new JDK to link it to the “java” and “javac” command.\n$ sudo update-alternatives --config java There are 2 choices for the alternative java (providing /usr/bin/java). Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/lib/jvm/java-11-openjdk-armhf/bin/java 1111 auto mode 1 /usr/lib/jvm/java-11-openjdk-armhf/bin/java 1111 manual mode 2 /usr/lib/jvm/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf/bin/java 1 manual mode Press \u0026lt;enter\u0026gt; to keep the current choice[*], or type selection number: 2 update-alternatives: using /usr/lib/jvm/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf/bin/java to provide /usr/bin/java (java) in manual mode $ sudo update-alternatives --config javac There are 2 choices for the alternative javac (providing /usr/bin/javac). Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/lib/jvm/java-11-openjdk-armhf/bin/javac 1111 auto mode 1 /usr/lib/jvm/java-11-openjdk-armhf/bin/javac 1111 manual mode 2 /usr/lib/jvm/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf/bin/javac 1 manual mode Press \u0026lt;enter\u0026gt; to keep the current choice[*], or type selection number: 2 update-alternatives: using /usr/lib/jvm/zulu11.41.75-ca-jdk11.0.8-linux_aarch32hf/bin/javac to provide /usr/bin/javac (javac) in manual mode  Now let\u0026rsquo;s check the Java version:\n$ java -version openjdk version \u0026quot;11.0.8\u0026quot; 2020-07-14 LTS OpenJDK Runtime Environment Zulu11.41+75-CA (build 11.0.8+10-LTS) OpenJDK Client VM Zulu11.41+75-CA (build 11.0.8+10-LTS, mixed mode)  OK, ready to run Java 11 applications on the Raspberry Pi with ARMv6!\nMore info If you want more info, or use JavaFX, check these blog posts:\n Installing Java and JavaFX on the Raspberry Pi (for ARMv7+) How to install and use Java 11 and JavaFX 11 on Raspberry Pi boards with ARMv6 processor  "},{"id":54,"href":"/pages-to-integrate/02.blog/blog/","title":"The Pi4J Blog","parent":"Pages-to-integrates","content":"TEST\n"},{"id":55,"href":"/pages-to-integrate/01.home/06.team/docs/","title":"The Team","parent":"Pages-to-integrates","content":"  Robert Savage @savageautomate, Project Founder, Architect, Lead Developer. Principal Software Architect/Engineer. Consultant, technology enthusiast, entrepreneur, open source contributor, technology blogger. Founder at shadeBlue, LLC and SavageSoftware, LLC. Robert has a more than 20 year career working in the professional audio visual and home/commercial automation industry and an extensive background in developing technology solutions with a special focus on home automation and hardware/firmware/software integration. In 2012, Robert created the Pi4J project which provides Java developers an easy to use Java library enabling access to low-level I/O functionality (GPIO, I2C, SPI, Serial, etc.) of embedded systems like the Raspberry Pi. I created Pi4J to empower Java programmers to get involved with embedded platforms such as the Raspberry Pi and provide an easy to use and accessible Java-centric object-oriented library enabling control of real world (physical) \"things\". Pi4J V2 brings an entirely new and modern approach to Java I/O programming for embedded systems. I'm excited to get V2 released and see what additional creative projects emerge.\n     Frank Delporte @frankdelporte, Project organization, Developer. Java and Raspberry Pi-enthousiast, blogger on webtechie.be and author of the book \"Getting Started with Java on Raspberry Pi\". Technical product lead at Televic Rail (Izegem, Belgium). Lead coach CoderDojo in Ieper, Belgium. Software developer with more than 25 years of experience in video, multimedia, technical project management, digital signage and (web) programming.\n I'm a strong believer in the power and fun of Java on the Raspberry Pi. My goal is to make it as easy as possible to get started for new and experienced Java developers who want to start there first hardware experiment. That was the reason I wrote a book about this subject and share my experiments on my blog and GitHub. Pi4J V2 brings a lot of improvements to an already great project, and - just one example - the use of the BCM pin numbers will make it even a lot easier to use the GPIO's. That's why I join this great team to assist in delivering this V2 and extend it further so we can bring even more Java to the Raspberry Pi. \n     Robert von Burg aka \"Eitch\" @eitchme, Developer. As lead developer for strolch.li we use Raspberry Pi as our platform to connect with products, and to implement a PLC in Java. The Pi4J project allows us to encapsulate the low level aspects of communicating with the hardware, and stay in our preferred choice. The https://strolch.li/plc.html project allows us to also stay in the same DSL for writing server applications, as well as communicating with low level devices.\nSince I love open source projects, it felt natural to me to start investing time in the Pi4J projects to assist in the further development.\n   "},{"id":56,"href":"/pages-to-integrate/04.documentation/08.advanced/02.3rd-party/docs/","title":"Third-Party Integration","parent":"Pages-to-integrates","content":"Page content goes here.\n"},{"id":57,"href":"/pages-to-integrate/05.typography/default/","title":"Typography","parent":"Pages-to-integrates","content":" ! Details on the full capabilities of Spectre.css can be found in the Official Spectre Documentation\nThe Quark theme is the new default theme for Grav built with Spectre.css the lightweight, responsive and modern CSS framework. Spectre provides basic styles for typography, elements, and a responsive layout system that utilizes best practices and consistent language design.\nHeadings H1 Heading 40px H2 Heading 32px H3 Heading 28px H4 Heading 24px H5 Heading 20px H6 Heading 16px # H1 Heading # H1 Heading `40px`\u0026lt;/small\u0026gt;` \u0026lt;span class=\u0026#34;h1\u0026#34;\u0026gt;H1 Heading\u0026lt;/span\u0026gt; Paragraphs Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent risus leo, dictum in vehicula sit amet, feugiat tempus tellus. Duis quis sodales risus. Etiam euismod ornare consequat.\nClimb leg rub face on everything give attitude nap all day for under the bed. Chase mice attack feet but rub face on everything hopped up on goofballs.\nMarkdown Semantic Text Elements Bold **Bold**\nItalic _Italic_\nDeleted ~~Deleted~~\nInline Code `Inline Code`\nHTML Semantic Text Elements I18N \u0026lt;abbr\u0026gt;\nCitation \u0026lt;cite\u0026gt;\nCtrl + S \u0026lt;kbd\u0026gt;\nTextSuperscripted \u0026lt;sup\u0026gt;\nTextSubscripted \u0026lt;sub\u0026gt;\nUnderlined \u0026lt;u\u0026gt;\nHighlighted \u0026lt;mark\u0026gt;\n20:14 \u0026lt;time\u0026gt;\nx = y + 2 \u0026lt;var\u0026gt;\nBlockquote  The advance of technology is based on making it fit in so that you don\u0026rsquo;t really even notice it, so it\u0026rsquo;s part of everyday life.\n- Bill Gates\n \u0026gt; The advance of technology is based on making it fit in so that you don\u0026#39;t really even notice it, \u0026gt; so it\u0026#39;s part of everyday life. \u0026gt; \u0026gt; \u0026lt;cite\u0026gt;- Bill Gates\u0026lt;/cite\u0026gt; Unordered List  list item 1 list item 2  list item 2.1 list item 2.2 list item 2.3  list item 3\n* list item 1 * list item 2 * list item 2.1 * list item 2.2 * list item 2.3 * list item 3  Ordered List  list item 1 list item 2  list item 2.1 list item 2.2 list item 2.3  list item 3\n1. list item 1 1. list item 2 1. list item 2.1 1. list item 2.2 1. list item 2.3 1. list item 3  Table    Name Genre Release date     The Shawshank Redemption Crime, Drama 14 October 1994   The Godfather Crime, Drama 24 March 1972   Schindler\u0026rsquo;s List Biography, Drama, History 4 February 1994   Se7en Crime, Drama, Mystery 22 September 1995    | Name | Genre | Release date | | :-------------------------- | :---------------------------: | -------------------: | | The Shawshank Redemption | Crime, Drama | 14 October 1994 | | The Godfather | Crime, Drama | 24 March 1972 | | Schindler\u0026#39;s List | Biography, Drama, History | 4 February 1994 | | Se7en | Crime, Drama, Mystery | 22 September 1995 | Notices The notices styles are actually provided by the markdown-notices plugin but are useful enough to include here:\n! This is a warning notification\n!! This is a error notification\n!!! This is a default notification\n!!!! This is a success notification\n! This is a warning notification !! This is a error notification !!! This is a default notification !!!! This is a success notification"},{"id":58,"href":"/about/","title":"Welcome to Pi4J","parent":"Pi4J","content":" !! Looking for the V1-versions of Pi4J which are compatible with Java 8? !! Click here\u0026hellip;\nBrief History The Pi4J Project was started in 2012, the same year the Raspberry Pi was introduced as a tool to provide Java developers a simple and familiar object-oriented interface library to access the low-level I/O capabilities of the Raspberry Pi including GPIO, I2C, SPI, PWM and Serial communications.\nProject Mission/Goals The Pi4J Project\u0026rsquo;s mission is to provide a rich and powerful, yet simple to use, Java-friendly API library enabling programmatic access to the low-level hardware I/O capabilities of embedded platforms such as the Raspberry Pi.\n!!! As of Version 2.0, Pi4J will no longer include support for preriphery devices and add-on chipsets/boards as part of the core project. A new plugin model has been introduced in version 2.0 that should help enable third-party development and support third-party add-ons which may be developed and maintained indepdentantly from the core Pi4J project.\nProject Status Summary Pi4J V.2 is finally starting to come together and is almost ready for some real-world BETA testing. Significant progress has been made on the general architecture and primary user-facing interfaces. Pi4J V.2 is a complete re-write and does not maintain API compatibility with previous versions. It is not intended to be a drop-in replacement for previous versions of Pi4J. Version 2.0 is a completely new design bringing with it modern conventions, development practices, extensibility support and a simplified integration experience for Pi4J consumers.\nThe Pi4J V.2 source code is available in this GitHub repository: Pi4J V.2 GitHub Repository\ngit clone https://github.com/Pi4J/pi4j-v2 (Please note, this repository is only temporary and the sources will be moved to the main Pi4J repo. Thus any forks from this tempoarary repository will be broken after the move.)\n!! Pi4J V.2 is still considered EXPERIMENTAL at this point. While many parts of the project are working, there are still a number of areas that require further development and certain APIs are subject to change without notice. A significant portion of the code is presently undocumented and hardware integration testing is incomplete. It is not recommended to use Pi4J V.2 in any production workload at this time.\nFor a more detailed account of the project status, please see this page: Project Status.\n"},{"id":59,"href":"/pages-to-integrate/01.home/02.what-is-new/docs/","title":"What's New (V2)","parent":"Pages-to-integrates","content":" What\u0026rsquo;s New in 2.0? Pi4J version 2.0 brings with it many new features and an entirely new architecture that focuses on extensibility, simplified integration and a modern Java API including the following:\n Fluent APIs/Interfaces Immutable Runtime Context Extensible Provider/Platform/Plug-in Architecture Builder-patterns for creating new I/O instances Dependency Injection via Pi4J Annotations Well-documented source code Hardware PWM Support Remote I/O Support (via TCP/IP) Java 11  In addition to the features listed above, Pi4J version 2.0 also abandons the old WiringPi pin numbering scheme in favor of the more traditional and commonly used Broadcom pin numbering scheme. This pin numbering scheme has been a source of confusion for a number of years, especially with beginners and is somewhat cumbersome to maintain as new Raspberry Pi models are introduces with differing or added GPIO pins. Moving forward, Pi4J will only use the Broadcom (BCM) pin numbering scheme.\nThe WiringPi project has now been deprecated (see http://wiringpi.com/wiringpi-deprecated/). Pi4J version 2.0 will no longer be based on WiringPi and has moved to using the PIGPIO library (http://abyz.me.uk/rpi/pigpio/) internally for low level integation. With this move, we will also support the remote I/O features (via TCP socket) offered by the PIGPIO daemon (http://abyz.me.uk/rpi/pigpio/pigpiod.html).\nWhat are the differences compared to V1? Starting with the Pi4J 2.0 builds, the Pi4J project is prioritizing focus on providing Java programs access, control and communication with the core I/O capabilities of the Raspberry Pi platform. Earlier versions of Pi4J were perhaps too ambitious in scope and that led to significant project bloat to the point that the project was becoming unsustainable. The goal moving forward is to limit scope to that of the raw I/O capabilities of the Raspberry Pi platform and provide timely updates and releases for bug fixed and new RaspberryPi model introductions. Reducing the scope of the project should better serve the Java community for basic I/O access by reducing complexity.\nThe following features have been removed from the Pi4J library:\n IO Expanders \u0026ndash; IO expansion is still supported but concrete implementations should be provided outside the core Pi4J core project such that they can be maintained and extended independently.\n Other Platforms \u0026ndash; Other platforms such as Odroid, BananaPi, NanoPi, OrangePi, etc. have been removed and will no longer be supported. The challenge with supporting these additional platforms is that Pi4J depends on the underlying WiringPi project and WiringPi ports for these other platforms is not well supported by the various SoC vendors or community. The various WiringPi ports for these other platforms are also inconsistent causing inconsistent features and functionality of Pi4J. Additionally, regression testing of bug fixes and new features in Pi4J is compounded with each additional supported platform.\n Components \u0026amp; Devices \u0026ndash; Pi4J originally provided higher level interfaces for components and devices that provided an abstraction layer between real world devices (things) and lower-level I/O interfaces. While a noble goal, unfortunately this part of the project never received the attention and time that it deserved and never gained much adoption by the community. We are removing these to allow Pi4J to focus solely on the raw I/O supported by the Raspberry Pi platform.\n  "}]