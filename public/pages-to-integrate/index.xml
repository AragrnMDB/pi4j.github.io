<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pages-to-integrates on Pi4J</title><link>https://test.pi4j.com/pages-to-integrate/</link><description>Recent content in Pages-to-integrates on Pi4J</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://test.pi4j.com/pages-to-integrate/index.xml" rel="self" type="application/rss+xml"/><item><title>About the code</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/docs/</guid><description>!!! In this section, you can find detailed info if you would like to contribute to the Pi4J Core project, want to create plugins and/or want to understand and build the core code.</description></item><item><title>Advanced</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/default/</guid><description>Pi4J V2 tries to focus on its core functionality (the GPIO I/O) but at the same time wants to provide the possibility to extend and adapt to other hardware, underlying framework etc.
You can find more info on these pages about some of the current functionalities to achieve this:</description></item><item><title>Annotated provisioning</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/05.annotated-provisioning/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/05.annotated-provisioning/docs/</guid><description>Next to the declarative approach, Java annotations are available for the configuration of I/O provisioning instead of the hard-coded approach offered in V1.
This implementation still needs to be further fine-tuned and unified somehow to make things cleaner and more straightforward, but would provide a way to initialize a I/O for instance like this:
@Register(0) @Address(&amp;quot;my.digital.input.pin.zero&amp;quot;) @Name(&amp;quot;My Digital Input Pin&amp;quot;) @Debounce(300000) // microseconds @WithProvider(type=PiGpioDigitalInputProvider.class) private DigitalInput input;</description></item><item><title>Architecture/Design</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/01.architecture/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/01.architecture/docs/</guid><description>The code of Pi4J is based on a layered approach, visualized in the picture below.
Since Pi4J is a low-level library, it tries to avoid inheriting third-party libraries at all costs. More complex dependency chains make it more difficult for users, especially novice users. Therefor, the only dependency Pi4J V.2 has is SLF4J to provide a standardized and extensible logging framework.
The dark grey blocks &amp;ldquo;Annotation Engine&amp;rdquo;, &amp;ldquo;@Register&amp;rdquo; and &amp;ldquo;@Inject&amp;rdquo; are here as a future idea but are not included in the current V2.</description></item><item><title>Build Instructions</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/03.build-instructions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/03.build-instructions/docs/</guid><description>Building the Pi4J Project is simple and requires minimal effort. Pi4J is primarily built using Apache Maven and Java 11. Pi4J can be built directly on your host computer or inside a Docker container where all toolchains and dependencies are already installed, configuired and cached.
! Note: if you wish to build using a Docker container, please skip ahead to the Building with Docker topic.
Prerequsites In order to build Pi4J, the host system must have the following toolchains pre-installed.</description></item><item><title>Building an I/O Instance</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/08.build-io/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/08.build-io/docs/</guid><description>Your page content goes here.</description></item><item><title>Choosing a Platform</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/06.chose-platform/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/06.chose-platform/docs/</guid><description>Platforms are extensible service modules responsible for defining a set of default I/O providers and specific hardware capabilities for an embedded hardware system where Pi4J is deployed/running.
Technically speaking &amp;hellip; multiple platforms could be loaded into the runtime context, but only one will be considered the default platform for most I/O provisioning and operations. An example of this could be both a RaspberryPi Platform and Mock Platform are detected as plugins and loaded into the context, but only one will be determined at runtime to be the default platform used by the context.</description></item><item><title>Choosing an I/O Provider</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/07.chose-provider/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/07.chose-provider/docs/</guid><description>Providers are extensible service modules responsible for the concrete implementation of a specific I/O type. Multiple providers for the same I/O type can be loaded into a Pi4J context concurrently. For example a &amp;ldquo;RaspberryPi-DigitalInputProvider&amp;rdquo; and &amp;ldquo;GertBoard-DigitalInputProvider&amp;rdquo; could both be loaded and both providing digital inputs at the same time.
The providers also allow to seperate the internal logic of the Pi4J core from the concrete implementation of the board on which they are used.</description></item><item><title>Code styling</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/06.code-styling/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/06.code-styling/docs/</guid><description>To prevent unnecessary code (tabs versus spaces, number of characters per line&amp;hellip;) we have defined an editorconfig for IntelliJ IDEA. You can find more info here about its use.
Some tips to keep the code clean and readable: * Short methods with a clear name * Use SonarLint to get improvement tips while code * Use shortcuts * CTRL+ALT+L: Reformat code * CTRL+ALT+O: Optimize imports</description></item><item><title>Community Forums</title><link>https://test.pi4j.com/pages-to-integrate/07.forums/external/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/07.forums/external/</guid><description/></item><item><title>Creating a Pi4J Context</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/05.create-context/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/05.create-context/docs/</guid><description>The context is an immutable runtime object that holds the configured state and manages the lifecycle of a Pi4J instance. It includes all loaded plugins, providers, platforms, I/O instance registry, environmental configuration and runtime objects including executor thread pools, I/O event listeners, etc.
Terminating/destroying the context stops and releases all resources, threads, listeners, and provisioned I/O instances held by the context.
Version 1 was implemented using a static singleton, while version 2 uses a &amp;ldquo;Context&amp;rdquo; to avoid static singletons.</description></item><item><title>Dependency injection</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/06.dependency-injection/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/06.dependency-injection/docs/</guid><description>Along with the annotated I/O configuration the ability to support I/O provisioning via dependency injection also makes a lot of sense. There is some basic brute-force stuff working but this needs more work to make this a compatible implementation for Spring or CDI.
@Inject private Context pi4j; // register a digital input listener to listen for any value changes on the digital input pin @Register(DIGITAL_INPUT_PIN_ID) private DigitalStateChangeListener changeListener = event -&amp;gt; System.</description></item><item><title>Devices examples</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/11.devices-examples/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/11.devices-examples/default/</guid><description>The core Pi4J V2 library doesn&amp;rsquo;t contain any specific support for devices like buttons, motors, LCD&amp;hellip; This was part of V1 but made it much more difficult to maintain and fully test the library.
On this page we want to keep a list of projects which contain implementation code for specific devices using the Pi4J V2 core library. Please let us know through the forum if you want to have your project added to this list.</description></item><item><title>Digital Input (GPIO)</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/02.digital-input/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/02.digital-input/docs/</guid><description>V2 provides a declarative style of configuration for I/O provisioning instead of the hard-coded approach offered in V1.
Examples of the various methods and approaches which can be used to provision the I/O needs are available in the examples project.
Properties properties = new Properties(); properties.put(&amp;quot;id&amp;quot;, &amp;quot;my_digital_input&amp;quot;); properties.put(&amp;quot;address&amp;quot;, DIGITAL_INPUT_PIN); properties.put(&amp;quot;pull&amp;quot;, &amp;quot;UP&amp;quot;); properties.put(&amp;quot;name&amp;quot;, &amp;quot;MY-DIGITAL-INPUT&amp;quot;); var config = DigitalInput.newConfigBuilder(pi4j) .load(properties) .build(); var input = pi4j.din().create(config);</description></item><item><title>Digital Output (GPIO)</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/01.digital-output/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/01.digital-output/docs/</guid><description>// Initialize Pi4J with an auto context // An auto context includes AUTO-DETECT BINDINGS enabled // which will load all detected Pi4J extension libraries // (Platforms and Providers) in the class path var pi4j = Pi4J.newAutoContext(); // create a digital output instance using the default digital output provider var output = pi4j.dout().create(DIGITAL_OUTPUT_PIN); output.config().shutdownState(DigitalState.HIGH); // setup a digital output listener to listen for any state changes on the digital output output.addListener(System.out::println); // lets invoke some changes on the digital output output.</description></item><item><title>Direct Download</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/02.direct-download/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/02.direct-download/docs/</guid><description>Direct downloads are not yet available.
Please build the project from sources available on GitHub Or acquire the compiled artifacts from the Maven SNAPSHOT repository.</description></item><item><title>Documentation</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/docs/</guid><description/></item><item><title>Download/Install</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/docs/</guid><description/></item><item><title>Featured Projects</title><link>https://test.pi4j.com/pages-to-integrate/06.featured-projects/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/06.featured-projects/default/</guid><description>!!!! Did you use Pi4J in one of your projects? We would love to hear from you! Please let us know by sending an e-mail to frank at pi4j.com with a brief description, URL links and pictures of the product or project you are working on.
plugin:content-inject</description></item><item><title>Getting Started</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/default/</guid><description>Pi4J wants to provide the best possible solution for Java development on the Raspberry Pi for two use-cases.
Do you want to develop an application without the need to touch the internal code of Pi4J? !!! In that case you&amp;rsquo;re at the right place for all the documentation you need! In this section you can find multiple examples to get you started.
Do you want to go a few steps further and contribute to Pi4J, extend it with additional plugins or understand how it is build?</description></item><item><title>Getting started with in-progress-V2</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/01.getting-started-with-in-progress-v2/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/01.getting-started-with-in-progress-v2/docs/</guid><description>Getting started with V2 in the state of June 3th of 2020.
Pi4J V2 Checkout the project pi4j-v2 Select JDK11, e.g. sdk use java 11.0.7.fx-librca In the root of pi4j-v2 run m̀vn clean install`
[INFO] Executed tasks [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for Pi4J :: Parent POM 2.0-SNAPSHOT: [INFO] [INFO] Pi4J :: Parent POM ................................. SUCCESS [ 0.972 s] [INFO] Pi4J :: DOCKER :: Docker Parent POM .............. SUCCESS [ 0.</description></item><item><title>Hardware testing</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/07.hardware-testing/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/07.hardware-testing/docs/</guid><description>To minimize the required time and efforts to test a new release, V2 aims to include an automated test which performs I/O testing on each I/O interface on each model of RPi. Ideally this would happen as part of the unit testing sequence for each code commit or at least as part of the release cycle.
To achieve this, an Arduino Due board with lots of on board I/O capability is being used.</description></item><item><title>I/O Examples</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/default/</guid><description>Here you can find detailed examples for the different functionalities of Pi4J per I/O type.
The supported low-level I/O interface types are defined in the core library as an enumerated list.
ANALOG_INPUT(AnalogInputProvider.class, AnalogInput.class, AnalogInputConfig.class, AnalogInputConfigBuilder.class), ANALOG_OUTPUT(AnalogOutputProvider.class, AnalogOutput.class, AnalogOutputConfig.class, AnalogOutputConfigBuilder.class), DIGITAL_INPUT(DigitalInputProvider.class, DigitalInput.class, DigitalInputConfig.class, DigitalInputConfigBuilder.class), DIGITAL_OUTPUT(DigitalOutputProvider.class, DigitalOutput.class, DigitalOutputConfig.class, DigitalOutputConfigBuilder.class), PWM(PwmProvider.class, Pwm.class, PwmConfig.class, PwmConfigBuilder.class), I2C(I2CProvider.class, com.pi4j.io.i2c.I2C.class, I2CConfig.class, I2CConfigBuilder.class), SPI(SpiProvider.class, Spi.class, I2CConfig.class, I2CConfigBuilder.class), SERIAL(SerialProvider.class, Serial.class, SerialConfig.class, SerialConfigBuilder.class);</description></item><item><title>I/O Registry</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/12.registry/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/12.registry/docs/</guid><description>An additional V2 feature is an I/O registry where all I/O instances that have been created can be maintained, managed, re-accessed, etc. As the library keeps track of all the created I/O instances, they become publicly accessible through a registry where users can interrogate, iterate, identify and access all created I/O instances that Pi4J is managing.
This is very useful for add-ons/plugins that want to provide runtime information about the state of all I/O, for example a web app illustrating the current state of I/O.</description></item><item><title>Installation</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/04.install/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/04.install/docs/</guid><description>This project is still in development and thus no package installers are available at this time.</description></item><item><title>Inter-Integrated Circuit (I²C)</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/04.i2c/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/04.i2c/docs/</guid><description>!! Please be aware there are some hardware issues when using the Raspberry Pi with devices that expect to be able to use clock stretching, for more info see &amp;ldquo;Adventures in I2C: clock stretching on the Raspberry Pi&amp;rdquo; and &amp;ldquo;I2C stretch bug. Been fixed or not?&amp;rdquo;.
Page content goes here.</description></item><item><title>License (Open Source)</title><link>https://test.pi4j.com/pages-to-integrate/01.home/05.license/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/01.home/05.license/docs/</guid><description>The Pi4J Version 2.0 project is distributed and licensed under the Apache License, Version 2.0 license. (A business-friendly OSS license) * https://www.apache.org/licenses/LICENSE-2.0 * https://github.com/Pi4J/pi4j-v2/blob/master/LICENSE.txt
Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &#34;License&#34; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &#34;Licensor&#34; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</description></item><item><title>Listening for I/O Events</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/09.io-events/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/09.io-events/docs/</guid><description>Your page content goes here.</description></item><item><title>Logging with SLF4J</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/04.logging/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/04.logging/docs/</guid><description>Pi4J uses SLF4J for logging. To include it in your project, add this Maven dependency:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-alpha0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; There are different ways to configure the logging output, as described on the SLF4J website, but the shortest is probably with this property in your main-method:
public static void main(String[] args) throws Exception { // Configure default lolling level, accept a log level as the first program argument System.</description></item><item><title>Maven Repository</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/03.repository/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/03.repository/docs/</guid><description>Pi4J V.2 is not yet released or published to Maven Central.
Please build the project from sources available on GitHub Or acquire the compiled artifacts from this Maven SNAPSHOT repository.</description></item><item><title>Maven settings</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/04.maven-settings/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/04.maven-settings/docs/</guid><description>To simplify development but not commit sensitive information, you can add personal or PC-specific settings in the Maven settings.xml file. This file is stored or needs to be created in the &amp;ldquo;.m2&amp;rdquo; directory in your home directory: * Windows: C:\Users\YOUR_NAME.m2 * Linux: /home/YOUR_NAME/.m2 * Mac: /Users/YOUR_NAME/.m2
For more info see this article on Baeldung.
This is an example settings file, including settings for compiling of Pi4J and credentials to upload the generated code to a Raspberry Pi.</description></item><item><title>Native Library Path</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/03.library-path/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/03.library-path/docs/</guid><description>Overview Some Pi4J plugins, such as the Pi4J PiGpio Provider plugin, depend on native JNI libraries to communicate with the underlying system. By default Pi4J embeds these native libraries as resources inside the plugin&amp;rsquo;s JAR file. At runtime Pi4J extracts the native library into a temporary directory so the JVM can load the library from the filesystem. Upon termination the temporary file is automatically removed.
This automatic extration behavior works well for most users; however, there are certain edge cases where this may fail.</description></item><item><title>PiGpio</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/07.chose-provider/01.pigpio/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/07.chose-provider/01.pigpio/docs/</guid><description>Your page content goes here.</description></item><item><title>PiJukeBox by Daniel Mårtensson</title><link>https://test.pi4j.com/pages-to-integrate/06.featured-projects/01.pijukebox-by-daniel-martensson/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/06.featured-projects/01.pijukebox-by-daniel-martensson/docs/</guid><description>PiJukeBox by Daniel Mårtensson Daniel used Java and Pi4J to turn an old Centrum U68 from 1940 into a MP3 player. The reason is because short wave, middle wave and long wave is today obsolete and not being used or sended today in Sweden. Also the electronics inside was a mess and very dangerous because it runs on both AC/DC current and all the wires began to lose their isolators.</description></item><item><title>Pin numbering</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/01.pin-numbering/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/01.pin-numbering/docs/</guid><description>Pi4J V1 took a pretty opinionated approach to pin numbering as the scheme was based on the underlying WiringPi. This scheme was incompatibility with other pin diagrams and pin numbering used by other development platforms and libraries.
As Pi4J V2 is build as a &amp;ldquo;pass thru library&amp;rdquo;, and uses PiGpio as the underlying framework, the more well-known BCM numbering is being used now.
This drawing shows the different numbers for WiringPi and BCM in a 40-pins Raspberry Pi header:</description></item><item><title>Plug-ins</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/07.plugins/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/07.plugins/docs/</guid><description>The goal of Pi4J V2 is to provide a solid base with all required &amp;ldquo;minimal functionality&amp;rdquo; while at the same time, promote third-party development and extensibility, thus enabling developers to build and maintain their extensions outside of the Pi4J core projects codebase.
This will enable us to deliver a stable, fully tested framework as the number of features inside of Pi4J can be limited and support for specific I/O hardware can be provided with an extension for Pi4J.</description></item><item><title>Previous versions (V1)</title><link>https://test.pi4j.com/pages-to-integrate/01.home/01.previous-version-v1/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/01.home/01.previous-version-v1/default/</guid><description>On this site you can find all detailed info with a lot of examples for the second generation of Pi4J which requires Java 11.
Documentation of the 1.X versions Pi4J Version 1.4 ONGOING Experimental build using JDK11 Not using Java-modules, this will be part of the V2 Pi4J Version 1.3 ONGOING Adds support for Rpi4B and minor bug fixes Based on JDK8 Pi4J Version 1.2 Released 2019-02-26 Based on Java 8 Documentation website V1.</description></item><item><title>Project Status</title><link>https://test.pi4j.com/pages-to-integrate/01.home/03.status/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/01.home/03.status/docs/</guid><description>Project Status/Summary Version 2.0 of Pi4J is finally starting to come together and is almost ready for some real-world BETA testing. Significant progress has been made on the general architecture and primary user-facing interfaces. Pi4J V.2 is a complete re-write and does not maintain API compatibility with previous versions. It is not intended to be a drop-in replacement for previous versions of Pi4J. Pi4J V.2 is a completely new design bringing modern conventions, development practices, extensibility support and simplified integration experience for Pi4J users.</description></item><item><title>Project structure</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/01.project-structure/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/01.project-structure/docs/</guid><description>To ensure the Pi4J V2 project is easy to maintain, there is a clear separation between the core functions and isolated test, example and plugin projects.
On this page we want to give you an overview of the projects which are part of the GitHub Pi4J Project.
Pi4J V2 Main project github.com/Pi4J/pi4j-v2 This is the main Pi4J V2 project providing all (basic) I/O functionalities. Pi4J Parent POM /pom.</description></item><item><title>Pulse Width Modulation (PWM)</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/03.pwm/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/03.pwm/docs/</guid><description>The RaspberryPi hardware supports 2 hardware PWM channels. But as Pi4J uses PiGPIO &amp;ldquo;under the hood&amp;rdquo;, we can take advantage of the
The Raspberry Pi supports 2 hardware based PWM channels. You can access these two channels via 2 separate sets of 4 GPIO header pins. But still limited to only 2 channels (2 unique PWM timing configurations).
The same PWM channel is available on multiple GPIO. The latest frequency and dutycycle setting will be used by all GPIO which share a PWM channel.</description></item><item><title>Raspberry Pi</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/06.chose-platform/01.raspberry-pi/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/06.chose-platform/01.raspberry-pi/docs/</guid><description>Your page content goes here.</description></item><item><title>Release Notes</title><link>https://test.pi4j.com/pages-to-integrate/01.home/04.release-notes/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/01.home/04.release-notes/docs/</guid><description>Release note are not available as this project does not yet have any releases.
Please see the Project Status page for up to date information about the current development state of this project.</description></item><item><title>Remote support</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/08.remote-support/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/08.remote-support/docs/</guid><description>One of the big features on the wish-list for V2: native support for remote I/O capability. Predominantly to support the ability for a user to perform development work on their desktop/laptop and be able to run their project with remote support slaving the I/O to a daemon running on the Raspberry Pi (or other supported SBC).
!! TO BE DECIDED: the V2 codebase does support this currently by using the PiGpio daemon.</description></item><item><title>Serial (UART/RS232)</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/06.serial/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/06.serial/docs/</guid><description>Page content goes here.</description></item><item><title>Serial Peripheral Interface (SPI)</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/05.spi/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/10.io-examples/05.spi/docs/</guid><description>Page content goes here.</description></item><item><title>Shutting down the Pi4J Context</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/13.shutdown/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/13.shutdown/docs/</guid><description>At the end of our application, the context needs to be shutdown to release the I/O and clean up the used resources.
# Start of program var pi4j = Pi4J.newAutoContext(); # YOUR CODE GOES HERE # End of program pi4j.shutdown();</description></item><item><title>Source Repository (GitHub)</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/05.source/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/09.about-the-code/02.download/05.source/docs/</guid><description/></item><item><title>The correct Java version</title><link>https://test.pi4j.com/pages-to-integrate/03.getting-started/02.the-correct-java-version/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/03.getting-started/02.the-correct-java-version/default/</guid><description>To use Pi4J V2 you&amp;rsquo;ll need Java 11 or newer. Luckily this version is included in the current version of Raspbian OS. In the release notes of Raspbian you can see that the version of 2019-06-20 includes OpenJDK Java 11:
2019-06-20: Based on Debian Buster Oracle Java 7 and 8 replaced with OpenJDK 11 But you will need to keep in mind this version is only compatible with ARMv7 or higher and doesn&amp;rsquo;t support all Rapberry Pi board versions.</description></item><item><title>The Pi4J Blog</title><link>https://test.pi4j.com/pages-to-integrate/02.blog/blog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/02.blog/blog/</guid><description>TEST</description></item><item><title>The Team</title><link>https://test.pi4j.com/pages-to-integrate/01.home/06.team/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/01.home/06.team/docs/</guid><description>Robert Savage @savageautomate, Project Founder, Architect, Lead Developer. Principal Software Architect/Engineer. Consultant, technology enthusiast, entrepreneur, open source contributor, technology blogger. Founder at shadeBlue, LLC and SavageSoftware, LLC. Robert has a more than 20 year career working in the professional audio visual and home/commercial automation industry and an extensive background in developing technology solutions with a special focus on home automation and hardware/firmware/software integration. In 2012, Robert created the Pi4J project which provides Java developers an easy to use Java library enabling access to low-level I/O functionality (GPIO, I2C, SPI, Serial, etc.</description></item><item><title>Third-Party Integration</title><link>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/02.3rd-party/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/04.documentation/08.advanced/02.3rd-party/docs/</guid><description>Page content goes here.</description></item><item><title>Typography</title><link>https://test.pi4j.com/pages-to-integrate/05.typography/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/05.typography/default/</guid><description>! Details on the full capabilities of Spectre.css can be found in the Official Spectre Documentation
The Quark theme is the new default theme for Grav built with Spectre.css the lightweight, responsive and modern CSS framework. Spectre provides basic styles for typography, elements, and a responsive layout system that utilizes best practices and consistent language design.
Headings H1 Heading 40px H2 Heading 32px H3 Heading 28px H4 Heading 24px H5 Heading 20px H6 Heading 16px # H1 Heading # H1 Heading `40px`&amp;lt;/small&amp;gt;` &amp;lt;span class=&amp;#34;h1&amp;#34;&amp;gt;H1 Heading&amp;lt;/span&amp;gt; Paragraphs Lorem ipsum dolor sit amet, consectetur adipiscing elit.</description></item><item><title>What&#39;s New (V2)</title><link>https://test.pi4j.com/pages-to-integrate/01.home/02.what-is-new/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/pages-to-integrate/01.home/02.what-is-new/docs/</guid><description>What&amp;rsquo;s New in 2.0? Pi4J version 2.0 brings with it many new features and an entirely new architecture that focuses on extensibility, simplified integration and a modern Java API including the following:
Fluent APIs/Interfaces Immutable Runtime Context Extensible Provider/Platform/Plug-in Architecture Builder-patterns for creating new I/O instances Dependency Injection via Pi4J Annotations Well-documented source code Hardware PWM Support Remote I/O Support (via TCP/IP) Java 11 In addition to the features listed above, Pi4J version 2.</description></item></channel></rss>