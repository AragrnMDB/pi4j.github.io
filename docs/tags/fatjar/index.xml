<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FatJAR on Pi4J</title><link>https://pi4j.com/tags/fatjar/</link><description>Recent content in FatJAR on Pi4J</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pi4j.com/tags/fatjar/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimal example as FAT JAR</title><link>https://pi4j.com/getting-started/minimal-example-application-fatjar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/getting-started/minimal-example-application-fatjar/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-fatjar
The &amp;ldquo;Minimal example application&amp;rdquo; uses one LED and button to demonstrate the basic use of Pi4J V2. When building that project with Maven, all the required Java modules are copied to the target/distribution directory. But a lot of developers like to produce a single, executable JAR that contains all dependencies, also known as a &amp;ldquo;FAT JAR&amp;rdquo;.
The repository &amp;ldquo;pi4j-example-fatjar&amp;rdquo; GitHub project contains a Maven project with identical wiring, dependencies and build command to the &amp;ldquo;Minimal example application&amp;rdquo;, but results in such a FAT JAR instead of separate Java modules.</description></item></channel></rss>