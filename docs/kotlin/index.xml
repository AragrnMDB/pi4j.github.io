<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pi4J Kotlin DSL on Pi4J</title><link>https://pi4j.com/kotlin/</link><description>Recent content in Pi4J Kotlin DSL on Pi4J</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pi4j.com/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimal Kotlin Pi4J example</title><link>https://pi4j.com/kotlin/minimal-kotlin-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/minimal-kotlin-example/</guid><description>Full Example on GitHub: https://github.com/Pi4J/pi4j-kotlin/blob/master/example/src/main/kotlin/MinimalExample.kt
For full documentation, visit the Kotlin Docs
This is a minimal working example, make sure to check it out from the link above for the full introduction and comments.
It does exactly the same functionality of the Minimal Example using the Java API:
The application will toggle an LED on/off and each time you press the button, the toggling speed increases. When you have pushed the button 5 times, the application stops.</description></item><item><title>Kotlin API &amp; DSL Documentation</title><link>https://pi4j.com/kotlin/kotlin-api-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pi4j.com/kotlin/kotlin-api-docs/</guid><description>Here you can find the provided APIs and the dead-simple DSLs of the Kotlin package.
Components Context To create a new Pi4J context, use the pi4j function. It creates a new auto Context object and uses it as a receiver for your lambda:
pi4j { // You have access to a newly created auto context describe() } You don&amp;rsquo;t need to call shutdown(), it&amp;rsquo;s called automatically at the end of the block.</description></item></channel></rss>