<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I/O Examples on Pi4J</title><link>https://test.pi4j.com/documentation/io-examples/</link><description>Recent content in I/O Examples on Pi4J</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://test.pi4j.com/documentation/io-examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Digital Output (GPIO)</title><link>https://test.pi4j.com/documentation/io-examples/digital-output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/documentation/io-examples/digital-output/</guid><description>// Initialize Pi4J with an auto context // An auto context includes AUTO-DETECT BINDINGS enabled // which will load all detected Pi4J extension libraries // (Platforms and Providers) in the class path var pi4j = Pi4J.newAutoContext(); // create a digital output instance using the default digital output provider var output = pi4j.dout().create(DIGITAL_OUTPUT_PIN); output.config().shutdownState(DigitalState.HIGH); // setup a digital output listener to listen for any state changes on the digital output output.addListener(System.out::println); // lets invoke some changes on the digital output output.</description></item><item><title>Digital Input (GPIO)</title><link>https://test.pi4j.com/documentation/io-examples/digital-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/documentation/io-examples/digital-input/</guid><description>V2 provides a declarative style of configuration for I/O provisioning instead of the hard-coded approach offered in V1.
Examples of the various methods and approaches which can be used to provision the I/O needs are available in the examples project.
Properties properties = new Properties(); properties.put(&amp;quot;id&amp;quot;, &amp;quot;my_digital_input&amp;quot;); properties.put(&amp;quot;address&amp;quot;, DIGITAL_INPUT_PIN); properties.put(&amp;quot;pull&amp;quot;, &amp;quot;UP&amp;quot;); properties.put(&amp;quot;name&amp;quot;, &amp;quot;MY-DIGITAL-INPUT&amp;quot;); var config = DigitalInput.newConfigBuilder(pi4j) .load(properties) .build(); var input = pi4j.din().create(config);</description></item><item><title>Pulse Width Modulation (PWM)</title><link>https://test.pi4j.com/documentation/io-examples/pwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/documentation/io-examples/pwm/</guid><description>The RaspberryPi hardware supports 2 hardware PWM channels. But as Pi4J uses PiGPIO &amp;ldquo;under the hood&amp;rdquo;, we can take advantage of the
The Raspberry Pi supports 2 hardware based PWM channels. You can access these two channels via 2 separate sets of 4 GPIO header pins. But still limited to only 2 channels (2 unique PWM timing configurations).
The same PWM channel is available on multiple GPIO. The latest frequency and dutycycle setting will be used by all GPIO which share a PWM channel.</description></item><item><title>Inter-Integrated Circuit (IÂ²C)</title><link>https://test.pi4j.com/documentation/io-examples/i2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/documentation/io-examples/i2c/</guid><description>!! Please be aware there are some hardware issues when using the Raspberry Pi with devices that expect to be able to use clock stretching, for more info see &amp;ldquo;Adventures in I2C: clock stretching on the Raspberry Pi&amp;rdquo; and &amp;ldquo;I2C stretch bug. Been fixed or not?&amp;rdquo;.
Page content goes here.</description></item><item><title>Serial Peripheral Interface (SPI)</title><link>https://test.pi4j.com/documentation/io-examples/spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/documentation/io-examples/spi/</guid><description>Page content goes here.</description></item><item><title>Serial (UART/RS232)</title><link>https://test.pi4j.com/documentation/io-examples/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://test.pi4j.com/documentation/io-examples/serial/</guid><description>Page content goes here.</description></item></channel></rss>