<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started with Pi4J on Pi4J</title><link>https://v2.pi4j.com/getting-started/</link><description>Recent content in Getting started with Pi4J on Pi4J</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://v2.pi4j.com/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Set up a new Raspberry Pi</title><link>https://v2.pi4j.com/getting-started/set-up-a-new-raspberry-pi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/set-up-a-new-raspberry-pi/</guid><description>Introduction The Raspberry Pi is a powerful machine with many use-cases. A lot of this power is based on the operating system you use. For our &amp;ldquo;Getting Started&amp;rdquo; examples we will be using the &amp;ldquo;official Raspberry Pi OS&amp;rdquo; (formerly known as &amp;ldquo;Raspbian OS&amp;rdquo;) but there is a long list of other possibilities which is listed for example on the&amp;ldquo;Awesome Raspberry Pi&amp;rdquo; list on GitHub.
In this article we start with a brand new Raspberry Pi board.</description></item><item><title>Understanding the GPIO pins</title><link>https://v2.pi4j.com/getting-started/understanding-the-pins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/understanding-the-pins/</guid><description>Connecting electronic components to the Pi is done via one or more of the pins in the so-called header. The number of pins has &amp;ldquo;grown&amp;rdquo; between the different Raspberry Pi board versions, but all recent ones have a 40-pin header. It&amp;rsquo;s of course important to be aware of the correct numbering to not correct components the wrong way.
Type of pins The pins have different uses
Power and ground Both 5V and 3.</description></item><item><title>Java development with VSC</title><link>https://v2.pi4j.com/getting-started/java-development-on-the-raspberry-pi-with-vsc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/java-development-on-the-raspberry-pi-with-vsc/</guid><description>Java on the Raspberry Pi To use Pi4J V2 you&amp;rsquo;ll need Java 11 or newer. Luckily this version is included in the current version of Raspberry Pi OS. In the release notes you can see that the version of 2019-06-20 includes OpenJDK Java 11:
2019-06-20: Based on Debian Buster Oracle Java 7 and 8 replaced with OpenJDK 11 But you will need to keep in mind this version is only compatible with ARMv7 or higher and doesn&amp;rsquo;t support all Raspberry Pi board versions.</description></item><item><title>Minimal example application</title><link>https://v2.pi4j.com/getting-started/minimal-example-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/minimal-example-application/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-minimal
In the &amp;ldquo;pi4j-example-minimal&amp;rdquo; GitHub project you can find a project which contains the minimal code to control a digital input and output with Pi4J. The project is further described on this page. The application will toggle an LED on/off and each time you press the button, the toggling speed increases. When you have pushed the button 5 times, the application stops.
Wiring This minimal example application uses this wiring:</description></item><item><title>Introduction to electronics</title><link>https://v2.pi4j.com/getting-started/introduction-to-electronics-with-crowpi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/introduction-to-electronics-with-crowpi/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-crowpi
For this example we are going to use a CrowPi, which is a starter kit build into a laptop-housing. Of course, you can get any electronics starter kit for this purpose or buy some separate components. That&amp;rsquo;s the fun of electronics: components are inexpensive and easy to find on ebay or one of the many web shops.
CrowPi 1
CrowPi 2</description></item><item><title>User interface with JavaFX</title><link>https://v2.pi4j.com/getting-started/user-interface-with-javafx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/user-interface-with-javafx/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-javafx
JavaFX is a framework to create user interfaces for desktop (Windows, Mac, Linux) and mobile phones. JavaFX is an opensource project which is documented on openjfx.io and the sources are available in this GitHub project.
The main goal of Java has always been to be able to create applications which are &amp;ldquo;write once, run everywhere&amp;rdquo;. JavaFX promises the same for Graphical User Interface applications.
Gluon is the main maintainer of the OpenJFX project and offers commercial support to companies who want to use JavaFX in critical applications.</description></item><item><title>Game development with FXGL</title><link>https://v2.pi4j.com/getting-started/game-development-with-fxgl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://v2.pi4j.com/getting-started/game-development-with-fxgl/</guid><description>GITHUB PROJECT: https://github.com/Pi4J/pi4j-example-fxgl
As described on the previous page you can use JavaFX to build user interfaces which behave exactly the same on your PC and Raspberry Pi. Let&amp;rsquo;s go a step further and make a game with an &amp;ldquo;Arcade&amp;rdquo; controller.
For this project, we will be using FXGL, an opensource library on top of JavaFX to build games.
The controller This project uses an Arcade kit in combination with a Picade X HAT USB-C to easily connect the wires of the buttons and joystick.</description></item></channel></rss>